(function(){const contentLogger={info:(msg,data)=> console.info(`[Assistente Content] ${msg}`,data || ''),error:(msg,data)=> console.error(`[Assistente Content] ${msg}`,data || ''),warn:(msg,data)=> console.warn(`[Assistente Content] ${msg}`,data || ''),debug:(msg,data)=> console.debug(`[Assistente Content] ${msg}`,data || '')};contentLogger.info("[Assistente de Regulação] Script de controle v18(Performance Otimizada)ativo.");const api=globalThis.browser || globalThis.chrome;if(!api){contentLogger.error('[Assistente] API de extensão não disponível');return;}let lastProcessedReguId=null;let observer=null;let intersectionObserver=null;let debounceTimeout=null;let mutationCount=0;const MAX_MUTATIONS_PER_SECOND=100;let mutationResetInterval=null;let performanceMetrics={checkCount: 0,totalTime: 0,averageTime: 0,lastCheckTime: 0};const domCache=new Map();const CACHE_TTL=5000;const isElementVisible=(element)=>{if(!element)return false;const rect=element.getBoundingClientRect();const style=window.getComputedStyle(element);return(rect.width > 0 && rect.height > 0 && style.visibility !=='hidden' && style.display !=='none' && rect.top < window.innerHeight && rect.bottom > 0);};const getCachedElement=(selector)=>{const now=Date.now();const cached=domCache.get(selector);if(cached &&(now - cached.timestamp)< CACHE_TTL){return cached.element;}const element=document.querySelector(selector);domCache.set(selector,{element,timestamp: now});return element;};const measurePerformance=(fn,name)=>{const start=performance.now();const result=fn();const end=performance.now();const duration=end - start;performanceMetrics.checkCount++;performanceMetrics.totalTime +=duration;performanceMetrics.averageTime=performanceMetrics.totalTime / performanceMetrics.checkCount;performanceMetrics.lastCheckTime=duration;if(duration > 50){contentLogger.warn(`[Assistente Performance] ${name}demorou ${duration.toFixed(2)}ms`);}return result;};const checkMaintenanceTab=()=>{return measurePerformance(()=>{const maintenanceTabPanel=getCachedElement("#tabs-manutencao");const isActive=maintenanceTabPanel && maintenanceTabPanel.getAttribute("aria-expanded")==="true";if(isActive){const idpElement=getCachedElement("#regu\\.reguPK\\.idp");const idsElement=getCachedElement("#regu\\.reguPK\\.ids");if(idpElement && idsElement && idpElement.value){const reguIdp=idpElement.value;const reguIds=idsElement.value;const currentReguId=`${reguIdp}-${reguIds}`;if(currentReguId !==lastProcessedReguId){lastProcessedReguId=currentReguId;const payload={reguIdp,reguIds};contentLogger.info("[Assistente] Aba Manutenção aberta. Enviando IDs para o background script:",payload);try{api.runtime.sendMessage({type: "SAVE_REGULATION_DATA",payload});}catch(e){contentLogger.error("[Assistente] Falha ao enviar mensagem para o background script:",e);}}}}else{lastProcessedReguId=null;}},'checkMaintenanceTab');};const throttledCheckMaintenanceTab=()=>{if(mutationCount >=MAX_MUTATIONS_PER_SECOND){contentLogger.warn('[Assistente] Limite de mutações atingido,ignorando verificação');return;}mutationCount++;if(debounceTimeout){clearTimeout(debounceTimeout);}debounceTimeout=setTimeout(()=>{const maintenanceTabPanel=document.getElementById("tabs-manutencao");if(maintenanceTabPanel && isElementVisible(maintenanceTabPanel)){checkMaintenanceTab();}},500);};const initIntersectionObserver=()=>{if(intersectionObserver){intersectionObserver.disconnect();}intersectionObserver=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting && entry.target.id==="tabs-manutencao"){measurePerformance(()=>{checkMaintenanceTab();},'intersectionCheck');}});},{threshold: 0.1,rootMargin: '50px'});const maintenanceTab=document.getElementById("tabs-manutencao");if(maintenanceTab){intersectionObserver.observe(maintenanceTab);}};const cleanupDomCache=()=>{const now=Date.now();for(const [selector,cached] of domCache.entries()){if((now - cached.timestamp)> CACHE_TTL){domCache.delete(selector);}}};const reportPerformanceMetrics=()=>{if(performanceMetrics.checkCount > 0){contentLogger.info('[Assistente Performance]',{totalChecks: performanceMetrics.checkCount,averageTime: performanceMetrics.averageTime.toFixed(2)+ 'ms',lastCheckTime: performanceMetrics.lastCheckTime.toFixed(2)+ 'ms',cacheSize: domCache.size});}};const cleanup=()=>{if(observer){observer.disconnect();observer=null;}if(intersectionObserver){intersectionObserver.disconnect();intersectionObserver=null;}if(debounceTimeout){clearTimeout(debounceTimeout);debounceTimeout=null;}if(mutationResetInterval){clearInterval(mutationResetInterval);mutationResetInterval=null;}domCache.clear();reportPerformanceMetrics();lastProcessedReguId=null;mutationCount=0;contentLogger.info("[Assistente] Recursos limpos e observers desconectados.");};const initObserver=()=>{if(observer){cleanup();}mutationCount=0;if(mutationResetInterval){clearInterval(mutationResetInterval);}mutationResetInterval=setInterval(()=>{mutationCount=0;},1000);observer=new MutationObserver(throttledCheckMaintenanceTab);observer.observe(document.body,{childList: true,subtree: true,attributes: true,attributeFilter: ["aria-expanded"],});};window.addEventListener("beforeunload",cleanup);api.runtime.onMessage.addListener((message)=>{if(message.type==="EXTENSION_DISABLED" || message.type==="CLEANUP"){cleanup();}});api.runtime.onConnect.addListener((port)=>{port.onDisconnect.addListener(()=>{cleanup();});});initObserver();initIntersectionObserver();setInterval(cleanupDomCache,CACHE_TTL);setInterval(reportPerformanceMetrics,5 * 60 * 1000);let inactivityTimer=null;const resetInactivityTimer=()=>{if(inactivityTimer){clearTimeout(inactivityTimer);}inactivityTimer=setTimeout(()=>{contentLogger.info("[Assistente] Limpeza automática por inatividade.");cleanup();},30 * 60 * 1000);};const originalCheck=checkMaintenanceTab;checkMaintenanceTab=()=>{originalCheck();resetInactivityTimer();};resetInactivityTimer();})();
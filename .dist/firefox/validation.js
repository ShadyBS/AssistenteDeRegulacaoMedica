import{CONFIG}from './config.js';const PATTERNS={CPF: /^\d{3}\.?\d{3}\.?\d{3}-?\d{2}$/,CNS: /^\d{15}$/,SEARCH_TERM: /^[a-zA-ZÀ-ÿ0-9\s\.\-\_]{1,100}$/,SQL_INJECTION: /(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\b|[';\"\\])/i,XSS: /[<>\"'&]/,NUMERIC_ONLY: /^\d+$/,DATE_BR: /^\d{2}\/\d{2}\/\d{4}$/,NAME: /^[a-zA-ZÀ-ÿ\s\.\-']{2,100}$/};const CPF_WEIGHTS_1=[10,9,8,7,6,5,4,3,2];const CPF_WEIGHTS_2=[11,10,9,8,7,6,5,4,3,2];export function validateCPF(cpf){if(!cpf || typeof cpf !=='string'){return{valid: false,message: 'CPF é obrigatório'};}const cleanCPF=cpf.replace(/[^\d]/g,'');if(!PATTERNS.CPF.test(cpf)){return{valid: false,message: 'Formato de CPF inválido(xxx.xxx.xxx-xx)'};}if(cleanCPF.length !==11){return{valid: false,message: 'CPF deve ter 11 dígitos'};}if(/^(\d)\1{10}$/.test(cleanCPF)){return{valid: false,message: 'CPF com dígitos repetidos é inválido'};}let sum=0;for(let i=0;i < 9;i++){sum +=parseInt(cleanCPF[i])* CPF_WEIGHTS_1[i];}let firstDigit=((sum * 10)% 11)% 10;if(firstDigit !==parseInt(cleanCPF[9])){return{valid: false,message: 'CPF inválido(primeiro dígito verificador)'};}sum=0;for(let i=0;i < 10;i++){sum +=parseInt(cleanCPF[i])* CPF_WEIGHTS_2[i];}let secondDigit=((sum * 10)% 11)% 10;if(secondDigit !==parseInt(cleanCPF[10])){return{valid: false,message: 'CPF inválido(segundo dígito verificador)'};}return{valid: true};}const CNS_VALIDATION_CACHE=new Map();const CNS_CACHE_TTL=5 * 60 * 1000;const CNS_CACHE_MAX_SIZE=100;function cleanCNSCache(){const now=Date.now();for(const [key,value] of CNS_VALIDATION_CACHE.entries()){if(now - value.timestamp > CNS_CACHE_TTL){CNS_VALIDATION_CACHE.delete(key);}}if(CNS_VALIDATION_CACHE.size > CNS_CACHE_MAX_SIZE){const entries=Array.from(CNS_VALIDATION_CACHE.entries());entries.sort((a,b)=> a[1].timestamp - b[1].timestamp);const toDelete=entries.slice(0,entries.length - CNS_CACHE_MAX_SIZE);toDelete.forEach(([key])=> CNS_VALIDATION_CACHE.delete(key));}}function validateDefinitiveCNS(cleanCNS){if(/^(\d)\1{14}$/.test(cleanCNS)){return{valid: false,message: 'CNS com todos os dígitos iguais é inválido'};}let sum=0;for(let i=0;i < 11;i++){sum +=parseInt(cleanCNS[i])*(15 - i);}const remainder=sum % 11;let dv=11 - remainder;if(dv===11){dv=0;}if(dv===10){sum +=2;const newRemainder=sum % 11;dv=11 - newRemainder;if(dv===11)dv=0;const lastFourDigits=cleanCNS.substring(11);if(lastFourDigits !=='0001'){return{valid: false,message: 'CNS inválido(dígitos verificadores incorretos para caso especial)'};}}else{const expectedDV=cleanCNS.substring(11,13);const calculatedDV=dv.toString().padStart(2,'0');if(expectedDV !==calculatedDV){return{valid: false,message: 'CNS inválido(dígitos verificadores incorretos)'};}const lastTwoDigits=cleanCNS.substring(13);if(lastTwoDigits !=='00'){return{valid: false,message: 'CNS definitivo deve terminar com 00'};}}return{valid: true};}function validateProvisionalCNS(cleanCNS){const firstDigit=cleanCNS[0];if(/^(\d)\1{14}$/.test(cleanCNS)){return{valid: false,message: 'CNS com todos os dígitos iguais é inválido'};}switch(firstDigit){case '7': const secondDigit7=parseInt(cleanCNS[1]);if(isNaN(secondDigit7)){return{valid: false,message: 'CNS provisório tipo 7 com formato inválido'};}if(cleanCNS.startsWith('70000000000')|| cleanCNS.startsWith('79999999999')){return{valid: false,message: 'CNS provisório tipo 7 com sequência reservada'};}break;case '8': const secondDigit8=parseInt(cleanCNS[1]);if(isNaN(secondDigit8)){return{valid: false,message: 'CNS provisório tipo 8 com formato inválido'};}if(cleanCNS.startsWith('80000000000')|| cleanCNS.startsWith('89999999999')){return{valid: false,message: 'CNS provisório tipo 8 com sequência reservada'};}break;case '9': const secondDigit9=parseInt(cleanCNS[1]);if(isNaN(secondDigit9)){return{valid: false,message: 'CNS provisório tipo 9 com formato inválido'};}if(cleanCNS.startsWith('90000000000')|| cleanCNS.startsWith('99999999999')){return{valid: false,message: 'CNS provisório tipo 9 com sequência reservada'};}let sum9=0;for(let i=0;i < 14;i++){sum9 +=parseInt(cleanCNS[i])*(15 - i);}const remainder9=sum9 % 11;const expectedLastDigit=remainder9 < 2 ? 0 : 11 - remainder9;const actualLastDigit=parseInt(cleanCNS[14]);if(actualLastDigit !==expectedLastDigit){return{valid: false,message: 'CNS provisório tipo 9 com dígito verificador incorreto'};}break;}const hasValidPattern=/^[789]\d{14}$/.test(cleanCNS)&& !/^([789])\1{14}$/.test(cleanCNS)&& !/^[789]0{14}$/.test(cleanCNS)&& !/^[789]1{14}$/.test(cleanCNS);if(!hasValidPattern){return{valid: false,message: 'CNS provisório com padrão inválido'};}return{valid: true};}export function validateCNS(cns){if(!cns || typeof cns !=='string'){return{valid: false,message: 'CNS é obrigatório'};}const cleanCNS=cns.replace(/[^\d]/g,'');if(!PATTERNS.CNS.test(cleanCNS)){return{valid: false,message: 'CNS deve ter exatamente 15 dígitos'};}cleanCNSCache();const cached=CNS_VALIDATION_CACHE.get(cleanCNS);if(cached &&(Date.now()- cached.timestamp)< CNS_CACHE_TTL){return cached.result;}const firstDigit=cleanCNS[0];let result;if(firstDigit==='1' || firstDigit==='2'){result=validateDefinitiveCNS(cleanCNS);if(result.valid){result.type='definitivo';}}else if(['7','8','9'].includes(firstDigit)){result=validateProvisionalCNS(cleanCNS);if(result.valid){result.type='provisorio';}}else{result={valid: false,message: 'CNS deve iniciar com 1,2,7,8 ou 9'};}CNS_VALIDATION_CACHE.set(cleanCNS,{result:{...result},timestamp: Date.now()});return result;}export function validateSearchTerm(searchTerm){if(!searchTerm || typeof searchTerm !=='string'){return{valid: false,message: 'Termo de busca é obrigatório'};}const trimmed=searchTerm.trim();if(trimmed.length===0){return{valid: false,message: 'Termo de busca não pode estar vazio'};}if(trimmed.length > 100){return{valid: false,message: 'Termo de busca muito longo(máximo 100 caracteres)'};}if(PATTERNS.SQL_INJECTION.test(trimmed)){return{valid: false,message: 'Termo de busca contém caracteres não permitidos'};}if(PATTERNS.XSS.test(trimmed)){return{valid: false,message: 'Termo de busca contém caracteres HTML não permitidos'};}return{valid: true,sanitized: sanitizeSearchTerm(trimmed)};}export function validateName(name){if(!name || typeof name !=='string'){return{valid: false,message: 'Nome é obrigatório'};}const trimmed=name.trim();if(trimmed.length < 2){return{valid: false,message: 'Nome deve ter pelo menos 2 caracteres'};}if(!PATTERNS.NAME.test(trimmed)){return{valid: false,message: 'Nome contém caracteres inválidos'};}return{valid: true};}export function validateBrazilianDate(dateStr){if(!dateStr || typeof dateStr !=='string'){return{valid: false,message: 'Data é obrigatória'};}if(!PATTERNS.DATE_BR.test(dateStr)){return{valid: false,message: 'Formato de data inválido(dd/mm/yyyy)'};}const [day,month,year]=dateStr.split('/').map(Number);const date=new Date(year,month - 1,day);if(day < 1 || day > 31){return{valid: false,message: 'Dia inválido(deve estar entre 1 e 31)'};}if(month < 1 || month > 12){return{valid: false,message: 'Mês inválido(deve estar entre 1 e 12)'};}if(date.getDate()!==day || date.getMonth()!==month - 1 || date.getFullYear()!==year){return{valid: false,message: 'Data inválida(ex: 31/02 não existe)'};}const currentYear=new Date().getFullYear();if(year < 1900 || year > currentYear + 1){return{valid: false,message: `Ano deve estar entre 1900 e ${currentYear + 1}`};}return{valid: true,parsed: date};}export function sanitizeSearchTerm(term){if(!term || typeof term !=='string')return '';return term .trim().replace(/[<>\"'&]/g,'').replace(/[\r\n\t]/g,' ').replace(/\s+/g,' ').substring(0,100);}export function sanitizeInput(input){if(!input || typeof input !=='string')return '';return input .trim().replace(/[<>\"'&]/g,'').replace(/[\r\n]/g,'').replace(/\s+/g,' ');}export function isSQLSafe(input){if(!input || typeof input !=='string')return true;return !PATTERNS.SQL_INJECTION.test(input);}export function applyRealtimeValidation(inputElement,validator,onValid,onInvalid){if(!inputElement)return;const validate=()=>{const result=validator(inputElement.value);if(result.valid){inputElement.classList.remove('border-red-500','bg-red-50');inputElement.classList.add('border-green-500');inputElement.setCustomValidity('');if(onValid)onValid(result);}else{inputElement.classList.remove('border-green-500');inputElement.classList.add('border-red-500','bg-red-50');inputElement.setCustomValidity(result.message || 'Valor inválido');if(onInvalid)onInvalid(result);}};let timeoutId;inputElement.addEventListener('input',()=>{clearTimeout(timeoutId);timeoutId=setTimeout(validate,CONFIG.TIMEOUTS.DEBOUNCE_SEARCH);});inputElement.addEventListener('blur',validate);inputElement.addEventListener('focus',()=>{inputElement.classList.remove('border-red-500','border-green-500','bg-red-50');});}export function createValidationError(message){const errorElement=document.createElement('div');errorElement.className='validation-error text-sm text-red-600 mt-1';errorElement.textContent=message;return errorElement;}export function clearValidationErrors(container){if(!container)return;const errors=container.querySelectorAll('.validation-error');errors.forEach(error=> error.remove());}export function validateForm(formData,rules){const errors={};let isValid=true;for(const [field,value] of Object.entries(formData)){const rule=rules[field];if(!rule)continue;let result;switch(rule.type){case 'cpf': result=validateCPF(value);break;case 'cns': result=validateCNS(value);break;case 'search': result=validateSearchTerm(value);break;case 'name': result=validateName(value);break;case 'date': result=validateBrazilianDate(value);break;default: continue;}if(!result.valid){errors[field]=result.message;isValid=false;}}return{isValid,errors};}
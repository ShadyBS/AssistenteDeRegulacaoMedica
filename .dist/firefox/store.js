import{createComponentLogger}from "./logger.js";const logger=createComponentLogger('Store');const state={currentPatient:{ficha: null,cadsus: null,lastCadsusCheck: null,isUpdating: false,},recentPatients: [],savedFilterSets:{},};const listeners=[];let notificationInProgress=false;let errorCount=0;const MAX_ERRORS=5;export const store={subscribe(listener){if(typeof listener !=='function'){logger.error('Store listener deve ser uma função');return()=>{};}listeners.push(listener);return()=>{const index=listeners.indexOf(listener);if(index > -1){listeners.splice(index,1);}};},_notify(){if(notificationInProgress){logger.warn("Tentativa de notificação recursiva detectada,ignorando...");return;}if(errorCount >=MAX_ERRORS){logger.error(`Muitos erros consecutivos em listeners(${errorCount}),pausando notificações temporariamente`);setTimeout(()=>{errorCount=0;logger.info("Contador de erros resetado,notificações reativadas");},5000);return;}notificationInProgress=true;let successCount=0;let currentErrorCount=0;for(const listener of listeners){try{listener();successCount++;}catch(error){currentErrorCount++;logger.error("Erro num listener do store:",error);if(error.name==='TypeError' || error.name==='ReferenceError'){logger.warn("Removendo listener problemático que causou erro crítico");const index=listeners.indexOf(listener);if(index > -1){listeners.splice(index,1);}}}}if(currentErrorCount > 0){errorCount +=currentErrorCount;}else{errorCount=0;}logger.info(`Notificações do store: ${successCount}sucesso(s),${currentErrorCount}erro(s)`);notificationInProgress=false;},setPatient(fichaData,cadsusData){state.currentPatient.ficha=fichaData;state.currentPatient.cadsus=cadsusData;state.currentPatient.lastCadsusCheck=cadsusData ? new Date(): null;state.currentPatient.isUpdating=false;this._notify();},clearPatient(){state.currentPatient.ficha=null;state.currentPatient.cadsus=null;state.currentPatient.lastCadsusCheck=null;state.currentPatient.isUpdating=false;this._notify();},setPatientUpdating(){state.currentPatient.isUpdating=true;this._notify();},getPatient(){return state.currentPatient.ficha ? state.currentPatient : null;},setRecentPatients(patients){state.recentPatients=patients;this._notify();},getRecentPatients(){return state.recentPatients;},setSavedFilterSets(sets){state.savedFilterSets=sets;this._notify();},getSavedFilterSets(){return state.savedFilterSets;},getState(){return{currentPatient:{...state.currentPatient},recentPatients: [...state.recentPatients],savedFilterSets:{...state.savedFilterSets},};},};
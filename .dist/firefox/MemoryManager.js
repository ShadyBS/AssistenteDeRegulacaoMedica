import{CONFIG}from "./config.js";import{createComponentLogger}from "./logger.js";const logger=createComponentLogger('MemoryManager');export class MemoryManager{constructor(){this.eventListenersWeakMap=new WeakMap();this.eventListeners=new Map();this.timeouts=new Map();this.intervals=new Map();this.globalRefs=new Map();this.cleanupCallbacks=new Set();this.isDestroyed=false;this.forceCleanupTimeout=null;this.lastCleanupTime=Date.now();this.memoryLeakThreshold=100;this.cleanupInterval=5 * 60 * 1000;this.memoryStats={listenersCreated: 0,listenersRemoved: 0,timeoutsCreated: 0,timeoutsCleared: 0,intervalsCreated: 0,intervalsCleared: 0,cleanupCount: 0,lastMemoryCheck: Date.now()};this.cleanup=this.cleanup.bind(this);this.handleBeforeUnload=this.handleBeforeUnload.bind(this);this.handleVisibilityChange=this.handleVisibilityChange.bind(this);this.handleError=this.handleError.bind(this);this.forceCleanup=this.forceCleanup.bind(this);this.checkMemoryLeaks=this.checkMemoryLeaks.bind(this);this.registerGlobalCleanupListeners();this.startMemoryLeakDetection();logger.info('[MemoryManager] Inicializado com proteÃ§Ã£o contra memory leaks');}registerGlobalCleanupListeners(){window.addEventListener('beforeunload',this.handleBeforeUnload,{passive: true});document.addEventListener('visibilitychange',this.handleVisibilityChange,{passive: true});window.addEventListener('error',this.handleError,{passive: true});window.addEventListener('unhandledrejection',this.handleError,{passive: true});window.addEventListener('blur',()=>{this.scheduleForceCleanup();},{passive: true});window.addEventListener('focus',()=>{this.cancelForceCleanup();},{passive: true});}startMemoryLeakDetection(){this.memoryCheckInterval=setInterval(()=>{this.checkMemoryLeaks();},2 * 60 * 1000);logger.info('[MemoryManager] DetecÃ§Ã£o de vazamentos de memÃ³ria iniciada');}checkMemoryLeaks(){const now=Date.now();const stats=this.getStats();this.memoryStats.lastMemoryCheck=now;if(stats.eventListeners > this.memoryLeakThreshold){logger.warn(`[MemoryManager] PossÃ­vel vazamento detectado: ${stats.eventListeners}listeners ativos`);this.performMemoryCleanup();}const oldTimeouts=this.getOldTimeouts();const oldIntervals=this.getOldIntervals();if(oldTimeouts.length > 10 || oldIntervals.length > 10){logger.warn(`[MemoryManager] Timeouts/intervals antigos detectados: ${oldTimeouts.length}/${oldIntervals.length}`);this.cleanupOldTimers();}if(now - this.lastCleanupTime > 10 * 60 * 1000){this.logMemoryStats();this.lastCleanupTime=now;}}getOldTimeouts(){const now=Date.now();const threshold=5 * 60 * 1000;const oldTimeouts=[];this.timeouts.forEach((timestamp,timeoutId)=>{if(now - timestamp > threshold){oldTimeouts.push(timeoutId);}});return oldTimeouts;}getOldIntervals(){const now=Date.now();const threshold=5 * 60 * 1000;const oldIntervals=[];this.intervals.forEach((timestamp,intervalId)=>{if(now - timestamp > threshold){oldIntervals.push(intervalId);}});return oldIntervals;}cleanupOldTimers(){const oldTimeouts=this.getOldTimeouts();const oldIntervals=this.getOldIntervals();oldTimeouts.forEach(timeoutId=>{this.clearTimeout(timeoutId);this.memoryStats.timeoutsCleared++;});oldIntervals.forEach(intervalId=>{this.clearInterval(intervalId);this.memoryStats.intervalsCleared++;});if(oldTimeouts.length > 0 || oldIntervals.length > 0){logger.info(`[MemoryManager] Limpeza de timers antigos: ${oldTimeouts.length}timeouts,${oldIntervals.length}intervals`);}}scheduleForceCleanup(){this.cancelForceCleanup();this.forceCleanupTimeout=setTimeout(()=>{logger.info('[MemoryManager] Executando cleanup forÃ§ado por inatividade');this.forceCleanup();},30 * 1000);logger.debug('[MemoryManager] Cleanup forÃ§ado agendado para 30 segundos');}cancelForceCleanup(){if(this.forceCleanupTimeout){clearTimeout(this.forceCleanupTimeout);this.forceCleanupTimeout=null;logger.debug('[MemoryManager] Cleanup forÃ§ado cancelado');}}forceCleanup(){logger.info('[MemoryManager] Executando cleanup forÃ§ado');this.cleanupOldTimers();this.performMemoryCleanup();this.memoryStats.cleanupCount++;this.cancelForceCleanup();}handleError(event){logger.warn('[MemoryManager] Erro detectado,executando limpeza preventiva:',event.error || event.reason);this.performMemoryCleanup();this.scheduleForceCleanup();}logMemoryStats(){const stats=this.getStats();const memoryStats=this.getMemoryStats();logger.info('[MemoryManager] EstatÃ­sticas de memÃ³ria:',{...stats,...memoryStats,memoryUsage: this.getMemoryUsage()});}getMemoryStats(){return{...this.memoryStats,leakRatio: this.memoryStats.listenersCreated > 0 ?(this.memoryStats.listenersCreated - this.memoryStats.listenersRemoved)/ this.memoryStats.listenersCreated : 0};}getMemoryUsage(){if(performance.memory){return{used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)};}return null;}addEventListener(element,event,handler,options={}){if(this.isDestroyed){logger.warn('[MemoryManager] Tentativa de adicionar listener apÃ³s destruiÃ§Ã£o');return;}if(!element || typeof handler !=='function'){logger.warn('[MemoryManager] ParÃ¢metros invÃ¡lidos para addEventListener');return;}element.addEventListener(event,handler,options);const listenerInfo={element,event,handler,options,timestamp: Date.now()};try{if(!this.eventListenersWeakMap.has(element)){this.eventListenersWeakMap.set(element,[]);}this.eventListenersWeakMap.get(element).push(listenerInfo);}catch(error){logger.debug('[MemoryManager] WeakMap nÃ£o disponÃ­vel,usando Map backup');}const elementKey=this.getElementKey(element);if(!this.eventListeners.has(elementKey)){this.eventListeners.set(elementKey,[]);}this.eventListeners.get(elementKey).push(listenerInfo);this.memoryStats.listenersCreated++;logger.debug(`[MemoryManager] Listener adicionado: ${event}em ${elementKey}`);}removeEventListener(element,event,handler){if(!element)return;element.removeEventListener(event,handler);try{const weakMapListeners=this.eventListenersWeakMap.get(element);if(weakMapListeners){const weakIndex=weakMapListeners.findIndex(l=> l.event===event && l.handler===handler);if(weakIndex !==-1){weakMapListeners.splice(weakIndex,1);if(weakMapListeners.length===0){this.eventListenersWeakMap.delete(element);}}}}catch(error){logger.debug('[MemoryManager] Erro ao remover do WeakMap:',error);}const elementKey=this.getElementKey(element);const listeners=this.eventListeners.get(elementKey);if(listeners){const index=listeners.findIndex(l=> l.event===event && l.handler===handler);if(index !==-1){listeners.splice(index,1);logger.debug(`[MemoryManager] Listener removido: ${event}de ${elementKey}`);this.memoryStats.listenersRemoved++;if(listeners.length===0){this.eventListeners.delete(elementKey);}}}}setTimeout(callback,delay){if(this.isDestroyed){logger.warn('[MemoryManager] Tentativa de criar timeout apÃ³s destruiÃ§Ã£o');return null;}const timeoutId=setTimeout(()=>{this.timeouts.delete(timeoutId);try{callback();}catch(error){logger.error('[MemoryManager] Erro em timeout callback:',error);}},delay);this.timeouts.set(timeoutId,Date.now());this.memoryStats.timeoutsCreated++;logger.debug(`[MemoryManager] Timeout criado: ${timeoutId}(${delay}ms)`);return timeoutId;}clearTimeout(timeoutId){if(timeoutId && this.timeouts.has(timeoutId)){clearTimeout(timeoutId);this.timeouts.delete(timeoutId);this.memoryStats.timeoutsCleared++;logger.debug(`[MemoryManager] Timeout limpo: ${timeoutId}`);}}setInterval(callback,delay){if(this.isDestroyed){logger.warn('[MemoryManager] Tentativa de criar interval apÃ³s destruiÃ§Ã£o');return null;}const intervalId=setInterval(()=>{try{callback();}catch(error){logger.error('[MemoryManager] Erro em interval callback:',error);this.clearInterval(intervalId);}},delay);this.intervals.set(intervalId,Date.now());this.memoryStats.intervalsCreated++;logger.debug(`[MemoryManager] Interval criado: ${intervalId}(${delay}ms)`);return intervalId;}clearInterval(intervalId){if(intervalId && this.intervals.has(intervalId)){clearInterval(intervalId);this.intervals.delete(intervalId);this.memoryStats.intervalsCleared++;logger.debug(`[MemoryManager] Interval limpo: ${intervalId}`);}}setGlobalRef(key,value){this.globalRefs.set(key,value);logger.debug(`[MemoryManager] ReferÃªncia global registrada: ${key}`);}getGlobalRef(key){return this.globalRefs.get(key);}clearGlobalRef(key){if(this.globalRefs.has(key)){this.globalRefs.delete(key);logger.debug(`[MemoryManager] ReferÃªncia global removida: ${key}`);}}addCleanupCallback(callback){if(typeof callback==='function'){this.cleanupCallbacks.add(callback);logger.debug('[MemoryManager] Callback de limpeza registrado');}}removeCleanupCallback(callback){this.cleanupCallbacks.delete(callback);}getElementKey(element){if(!element)return 'unknown';if(element.id)return `#${element.id}`;if(element.className){const classes=element.className.split(' ').filter(Boolean);if(classes.length > 0)return `.${classes[0]}`;}return element.tagName?.toLowerCase()|| 'unknown';}handleBeforeUnload(){logger.info('[MemoryManager] PÃ¡gina sendo descarregada,executando limpeza');this.cleanup();}handleVisibilityChange(){if(document.hidden){logger.info('[MemoryManager] PÃ¡gina oculta,executando limpeza preventiva');this.performMemoryCleanup();}}performMemoryCleanup(){if(typeof window.gc==='function'){try{window.gc();logger.info('[MemoryManager] Garbage collection executado');}catch(error){logger.debug('[MemoryManager] Garbage collection nÃ£o disponÃ­vel');}}const now=Date.now();const oldThreshold=5 * 60 * 1000;logger.info('[MemoryManager] Limpeza de memÃ³ria executada');}cleanup(){if(this.isDestroyed){logger.warn('[MemoryManager] Cleanup jÃ¡ executado');return;}logger.info('[MemoryManager] Iniciando limpeza completa de recursos');this.cancelForceCleanup();if(this.memoryCheckInterval){clearInterval(this.memoryCheckInterval);this.memoryCheckInterval=null;}this.cleanupCallbacks.forEach(callback=>{try{callback();}catch(error){logger.error('[MemoryManager] Erro em callback de limpeza:',error);}});let listenersRemoved=0;this.eventListeners.forEach((listeners,elementKey)=>{listeners.forEach(({element,event,handler})=>{try{if(element && element.removeEventListener){element.removeEventListener(event,handler);listenersRemoved++;}}catch(error){logger.error(`[MemoryManager] Erro ao remover listener ${event}de ${elementKey}:`,error);}});});let timeoutsCleared=0;this.timeouts.forEach((timestamp,timeoutId)=>{try{clearTimeout(timeoutId);timeoutsCleared++;}catch(error){logger.error(`[MemoryManager] Erro ao limpar timeout ${timeoutId}:`,error);}});let intervalsCleared=0;this.intervals.forEach((timestamp,intervalId)=>{try{clearInterval(intervalId);intervalsCleared++;}catch(error){logger.error(`[MemoryManager] Erro ao limpar interval ${intervalId}:`,error);}});this.globalRefs.clear();this.eventListeners.clear();this.timeouts.clear();this.intervals.clear();this.cleanupCallbacks.clear();this.eventListenersWeakMap=new WeakMap();try{window.removeEventListener('beforeunload',this.handleBeforeUnload);document.removeEventListener('visibilitychange',this.handleVisibilityChange);window.removeEventListener('error',this.handleError);window.removeEventListener('unhandledrejection',this.handleError);window.removeEventListener('blur',this.scheduleForceCleanup);window.removeEventListener('focus',this.cancelForceCleanup);}catch(error){logger.error('[MemoryManager] Erro ao remover listeners globais:',error);}this.memoryStats.listenersRemoved +=listenersRemoved;this.memoryStats.timeoutsCleared +=timeoutsCleared;this.memoryStats.intervalsCleared +=intervalsCleared;this.memoryStats.cleanupCount++;this.performMemoryCleanup();logger.info('[MemoryManager] EstatÃ­sticas finais de limpeza:',{listenersRemoved,timeoutsCleared,intervalsCleared,totalStats: this.getMemoryStats()});this.isDestroyed=true;logger.info('[MemoryManager] Limpeza completa finalizada');}getStats(){return{eventListeners: this.eventListeners.size,timeouts: this.timeouts.size,intervals: this.intervals.size,globalRefs: this.globalRefs.size,cleanupCallbacks: this.cleanupCallbacks.size,isDestroyed: this.isDestroyed};}logStats(){const stats=this.getStats();logger.info('[MemoryManager] EstatÃ­sticas:',stats);}}let globalMemoryManager=null;export function getMemoryManager(){if(!globalMemoryManager){globalMemoryManager=new MemoryManager();}return globalMemoryManager;}export function destroyMemoryManager(){if(globalMemoryManager){globalMemoryManager.cleanup();globalMemoryManager=null;}}
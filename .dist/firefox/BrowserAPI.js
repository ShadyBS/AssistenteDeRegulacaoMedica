function getBrowserAPI(){if(typeof globalThis !=='undefined'){if(globalThis.browser && globalThis.browser.runtime){return{api: globalThis.browser,name: 'Firefox'};}if(globalThis.chrome && globalThis.chrome.runtime){return{api: globalThis.chrome,name: 'Chromium'};}}if(typeof browser !=="undefined" && browser.runtime){return{api: browser,name: 'Firefox'};}if(typeof chrome !=="undefined" && chrome.runtime){return{api: chrome,name: 'Chromium'};}if(typeof window !=='undefined'){if(window.browser && window.browser.runtime){return{api: window.browser,name: 'Firefox'};}if(window.chrome && window.chrome.runtime){return{api: window.chrome,name: 'Chromium'};}}throw new Error("Nenhuma API de browser extension disponível. Verifique se está executando em contexto de extensão.");}let browserAPIInfo=null;function getBrowserAPIInfoInternal(){if(!browserAPIInfo){browserAPIInfo=getBrowserAPI();console.log(`[BrowserAPI] API inicializada: ${browserAPIInfo.name}`);}return browserAPIInfo;}export function getBrowserAPIInstance(){return getBrowserAPIInfoInternal().api;}export function isFirefox(){return getBrowserAPIInfoInternal().name==='Firefox';}export function isChromium(){return getBrowserAPIInfoInternal().name==='Chromium';}export function getBrowserInfo(){const api=getBrowserAPIInstance();const ff=isFirefox();return{isFirefox: ff,isChromium: !ff,hasManifestV3: api.runtime?.getManifest?.()?.manifest_version===3,browserName: ff ? 'Firefox' : 'Chromium',apiObject: ff ? 'browser' : 'chrome'};}export class BrowserAPIWrapper{constructor(){this.api=getBrowserAPIInstance();}get raw(){return this.api;}get storageLocal(){return this.api.storage.local;}get storageSync(){return this.api.storage.sync;}get runtime(){return this.api.runtime;}get tabs(){return this.api.tabs;}get alarms(){return this.api.alarms;}getManifest(){return this.api.runtime.getManifest();}async hasPermission(permission){try{return await this.api.permissions.contains({permissions: [permission]});}catch(error){console.warn(`[BrowserAPI] Erro ao verificar permissão ${permission}:`,error);return false;}}async requestPermission(permission){try{return await this.api.permissions.request({permissions: [permission]});}catch(error){console.error(`[BrowserAPI] Erro ao solicitar permissão ${permission}:`,error);return false;}}}let wrapperInstance=null;export function getBrowserAPIWrapper(){if(!wrapperInstance){wrapperInstance=new BrowserAPIWrapper();}return wrapperInstance;}export default getBrowserAPIInstance();console.log('[BrowserAPI] Módulo carregado -',getBrowserInfo());
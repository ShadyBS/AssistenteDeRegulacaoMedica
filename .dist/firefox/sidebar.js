import "./browser-polyfill.js";import * as API from "./api.js";import{defaultFieldConfig}from "./field-config.js";import{filterConfig}from "./filter-config.js";import{SectionManager}from "./SectionManager.js";import{TimelineManager}from "./TimelineManager.js";import * as Renderers from "./renderers.js";import * as Utils from "./utils.js";import * as Search from "./ui/search.js";import * as PatientCard from "./ui/patient-card.js";import{store}from "./store.js";import{CONFIG,getTimeout,getCSSClass}from "./config.js";import{getMemoryManager}from "./MemoryManager.js";import{getBrowserAPIInstance}from "./BrowserAPI.js";import{encryptForStorage,decryptFromStorage,cleanupExpiredData,MEDICAL_DATA_CONFIG}from "./crypto-utils.js";import{createComponentLogger}from "./logger.js";const logger=createComponentLogger('Sidebar');const sectionIcons={"patient-details": `<svg xmlns="http: timeline: `<svg xmlns="http: regulations: `<svg xmlns="http: consultations: `<svg xmlns="http: exams: `<svg xmlns="http: appointments: `<svg xmlns="http: documents: `<svg xmlns="http:};let currentRegulationData=null;let sectionManagers={};const memoryManager=getMemoryManager();const browserAPI=getBrowserAPIInstance();let patientSelectionInProgress=false;let pendingPatientSelection=null;let patientSelectionTimeout=null;function cleanupPatientResources(){console.log('[Sidebar] Limpando recursos do paciente anterior');if(patientSelectionTimeout){memoryManager.clearTimeout(patientSelectionTimeout);patientSelectionTimeout=null;}patientSelectionInProgress=false;pendingPatientSelection=null;currentRegulationData=null;Object.values(sectionManagers).forEach((manager)=>{if(typeof manager.cleanup==="function"){manager.cleanup();}if(typeof manager.clearAutomationFeedbackAndFilters==="function"){manager.clearAutomationFeedbackAndFilters(false);}else if(typeof manager.clearAutomation==="function"){manager.clearAutomation();}});memoryManager.performMemoryCleanup();console.log('[Sidebar] Limpeza de recursos concluída');}function registerCleanupCallbacks(){memoryManager.addCleanupCallback(()=>{console.log('[Sidebar] Executando limpeza de section managers');Object.values(sectionManagers).forEach((manager)=>{if(typeof manager.cleanup==="function"){try{manager.cleanup();}catch(error){console.error('[Sidebar] Erro ao limpar section manager:',error);}}});sectionManagers={};});memoryManager.addCleanupCallback(()=>{console.log('[Sidebar] Limpando timeouts globais');if(patientSelectionTimeout){clearTimeout(patientSelectionTimeout);patientSelectionTimeout=null;}});memoryManager.addCleanupCallback(()=>{console.log('[Sidebar] Limpando variáveis globais');currentRegulationData=null;patientSelectionInProgress=false;pendingPatientSelection=null;});}const applyNormalizedTextFilter=(items,text,getFieldContent)=>{const searchTerms=Utils.normalizeString(text).split(",").map((t)=> t.trim()).filter(Boolean);if(searchTerms.length===0)return items;return items.filter((item)=>{const content=Utils.normalizeString(getFieldContent(item));return searchTerms.some((term)=> content.includes(term));});};const consultationFilterLogic=(data,filters)=>{let filteredData=[...data];if(filters["hide-no-show-checkbox"]){filteredData=filteredData.filter((c)=> !c.isNoShow);}filteredData=applyNormalizedTextFilter(filteredData,filters["consultation-filter-keyword"],(c)=> [ c.specialty,c.professional,c.unit,...c.details.map((d)=> `${d.label}${d.value}`),].join(" "));filteredData=applyNormalizedTextFilter(filteredData,filters["consultation-filter-cid"],(c)=> c.details.map((d)=> d.value).join(" "));filteredData=applyNormalizedTextFilter(filteredData,filters["consultation-filter-specialty"],(c)=> c.specialty || "");filteredData=applyNormalizedTextFilter(filteredData,filters["consultation-filter-professional"],(c)=> c.professional || "");filteredData=applyNormalizedTextFilter(filteredData,filters["consultation-filter-unit"],(c)=> c.unit || "");return filteredData;};const examFilterLogic=(data,filters)=>{let filteredData=[...data];filteredData=applyNormalizedTextFilter(filteredData,filters["exam-filter-name"],(item)=> item.examName);filteredData=applyNormalizedTextFilter(filteredData,filters["exam-filter-professional"],(item)=> item.professional);filteredData=applyNormalizedTextFilter(filteredData,filters["exam-filter-specialty"],(item)=> item.specialty);return filteredData;};const appointmentFilterLogic=(data,filters,fetchType)=>{let filteredData=[...data];const status=filters["appointment-filter-status"] || "todos";if(status !=="todos"){filteredData=filteredData.filter((a)=>(a.status || "").toUpperCase()===status.toUpperCase());}if(fetchType==="consultas"){filteredData=filteredData.filter((a)=> !a.type.toUpperCase().includes("EXAME"));}else if(fetchType==="exames"){filteredData=filteredData.filter((a)=> a.type.toUpperCase().includes("EXAME"));}filteredData=applyNormalizedTextFilter(filteredData,filters["appointment-filter-term"],(a)=> [a.professional,a.specialty,a.description].join(" "));filteredData=applyNormalizedTextFilter(filteredData,filters["appointment-filter-location"],(a)=> a.location || "");return filteredData;};const regulationFilterLogic=(data,filters)=>{let filteredData=[...data];const status=filters["regulation-filter-status"] || "todos";const priority=filters["regulation-filter-priority"] || "todas";if(status !=="todos"){filteredData=filteredData.filter((item)=>(item.status || "").toUpperCase()===status.toUpperCase());}if(priority !=="todas"){filteredData=filteredData.filter((item)=>(item.priority || "").toUpperCase()===priority.toUpperCase());}filteredData=applyNormalizedTextFilter(filteredData,filters["regulation-filter-procedure"],(item)=> item.procedure || "");filteredData=applyNormalizedTextFilter(filteredData,filters["regulation-filter-requester"],(item)=> item.requester || "");return filteredData;};const documentFilterLogic=(data,filters)=>{let filteredData=[...data];const startDateValue=document.getElementById("document-date-initial")?.value;const endDateValue=document.getElementById("document-date-final")?.value;if(startDateValue){const start=Utils.parseDate(startDateValue);if(start){filteredData=filteredData.filter((doc)=>{const docDate=Utils.parseDate(doc.date.split(" ")[0]);return docDate && docDate >=start;});}}if(endDateValue){const end=Utils.parseDate(endDateValue);if(end){filteredData=filteredData.filter((doc)=>{const docDate=Utils.parseDate(doc.date.split(" ")[0]);return docDate && docDate <=end;});}}filteredData=applyNormalizedTextFilter(filteredData,filters["document-filter-keyword"],(doc)=> doc.description || "");return filteredData;};const sectionConfigurations={"patient-details":{},timeline:{},consultations:{fetchFunction: API.fetchAllConsultations,renderFunction: Renderers.renderConsultations,initialSortState:{key: "sortableDate",order: "desc"},filterLogic: consultationFilterLogic,},exams:{fetchFunction: API.fetchExamesSolicitados,renderFunction: Renderers.renderExams,initialSortState:{key: "date",order: "desc"},filterLogic: examFilterLogic,},appointments:{fetchFunction: API.fetchAppointments,renderFunction: Renderers.renderAppointments,initialSortState:{key: "date",order: "desc"},filterLogic: appointmentFilterLogic,},regulations:{fetchFunction: API.fetchAllRegulations,renderFunction: Renderers.renderRegulations,initialSortState:{key: "date",order: "desc"},filterLogic: regulationFilterLogic,},documents:{fetchFunction: API.fetchDocuments,renderFunction: Renderers.renderDocuments,initialSortState:{key: "date",order: "desc"},filterLogic: documentFilterLogic,},};function applySectionIcons(){for(const sectionKey in sectionIcons){const iconContainer=document.getElementById(`${sectionKey}-section-icon`);if(iconContainer){iconContainer.innerHTML=sectionIcons[sectionKey];}}}function applyCustomHeaderStyles(styles){const defaultStyles={backgroundColor: "#ffffff",color: "#1e293b",iconColor: "#1e293b",fontSize: "16px",};for(const sectionKey in sectionIcons){const sectionId=sectionKey==="patient-details" ? "patient-details-section" : `${sectionKey}-section`;const sectionElement=document.getElementById(sectionId);if(!sectionElement)continue;const savedStyle=styles[sectionKey] ||{};const finalStyle={...defaultStyles,...savedStyle};sectionElement.style.setProperty("--section-bg-color",finalStyle.backgroundColor);sectionElement.style.setProperty("--section-font-color",finalStyle.color);sectionElement.style.setProperty("--section-icon-color",finalStyle.iconColor);sectionElement.style.setProperty("--section-font-size",finalStyle.fontSize);}}async function selectPatient(patientInfo,forceRefresh=false){const currentPatient=store.getPatient();if(currentPatient && currentPatient.ficha.isenPK.idp===patientInfo.idp && !forceRefresh){return;}if(patientSelectionInProgress){pendingPatientSelection={patientInfo,forceRefresh};return;}if(patientSelectionTimeout){memoryManager.clearTimeout(patientSelectionTimeout);patientSelectionTimeout=null;}patientSelectionTimeout=memoryManager.setTimeout(async()=>{cleanupPatientResources();await executePatientSelection(patientInfo,forceRefresh);if(pendingPatientSelection){const pending=pendingPatientSelection;pendingPatientSelection=null;memoryManager.setTimeout(()=>{selectPatient(pending.patientInfo,pending.forceRefresh);},100);}},300);}async function executePatientSelection(patientInfo,forceRefresh=false){if(patientSelectionInProgress){console.warn("Tentativa de seleção de paciente já em progresso,ignorando...");return;}patientSelectionInProgress=true;try{Utils.toggleLoader(true);Utils.clearMessage();store.setPatientUpdating();const ficha=await API.fetchVisualizaUsuario(patientInfo);const cadsus=await API.fetchCadsusData({cpf: Utils.getNestedValue(ficha,"entidadeFisica.entfCPF"),cns: ficha.isenNumCadSus,skipValidation: true});Object.values(sectionManagers).forEach((manager)=>{if(typeof manager.clearAutomationFeedbackAndFilters==="function"){manager.clearAutomationFeedbackAndFilters(false);}else if(typeof manager.clearAutomation==="function"){manager.clearAutomation();}});store.setPatient(ficha,cadsus);await updateRecentPatients(store.getPatient());console.log("Seleção de paciente concluída com sucesso:",patientInfo.idp);}catch(error){Utils.showMessage(error.message,"error");console.error("Erro na seleção de paciente:",error);store.clearPatient();}finally{Utils.toggleLoader(false);patientSelectionInProgress=false;}}async function init(){console.log('[Sidebar] Iniciando aplicação');try{await cleanupExpiredData(browserAPI);console.log('[Sidebar] Limpeza de dados expirados concluída');}catch(error){console.error('[Sidebar] Erro na limpeza de dados expirados:',error);}registerCleanupCallbacks();memoryManager.setGlobalRef('sectionManagers',sectionManagers);memoryManager.setGlobalRef('currentRegulationData',currentRegulationData);let baseUrlConfigured=true;try{await API.getBaseUrl();}catch(error){if(error?.message==="URL_BASE_NOT_CONFIGURED"){baseUrlConfigured=false;const mainContent=document.getElementById("main-content");const urlWarning=document.getElementById("url-config-warning");const openOptions=document.getElementById("open-options-from-warning");const reloadSidebar=document.getElementById("reload-sidebar-from-warning");if(mainContent)mainContent.classList.add("hidden");if(urlWarning)urlWarning.classList.remove("hidden");if(openOptions){openOptions.addEventListener("click",()=> browserAPI.runtime.openOptionsPage());}if(reloadSidebar){reloadSidebar.addEventListener("click",()=> window.location.reload());}}else{console.error("Initialization failed:",error);Utils.showMessage("Ocorreu um erro inesperado ao iniciar a extensão.","error");return;}}Utils.setupTabs(document.getElementById("layout-tabs-container"));Utils.setupTabs(document.getElementById("patterns-tabs-container"));if(!baseUrlConfigured){return;}const [globalSettings,regulationPriorities]=await Promise.all([ loadConfigAndData(),API.fetchRegulationPriorities(),]);globalSettings.regulationPriorities=regulationPriorities;applySectionIcons();applyCustomHeaderStyles(globalSettings.sectionHeaderStyles);applySectionOrder(globalSettings.sidebarSectionOrder);Search.init({onSelectPatient: selectPatient});PatientCard.init(globalSettings.fieldConfigLayout,{onForceRefresh: selectPatient,});initializeSections(globalSettings);applyUserPreferences(globalSettings);addGlobalEventListeners();setupAutoModeToggle();await checkForPendingRegulation();memoryManager.logStats();console.log('[Sidebar] Aplicação inicializada com sucesso');}async function loadConfigAndData(){const syncData=await browserAPI.storage.sync.get({patientFields: defaultFieldConfig,filterLayout:{},autoLoadExams: false,autoLoadConsultations: false,autoLoadAppointments: false,autoLoadRegulations: false,autoLoadDocuments: false,enableAutomaticDetection: true,dateRangeDefaults:{},sidebarSectionOrder: [],sectionHeaderStyles:{},});const localData=await browserAPI.storage.local.get({recentPatients: [],savedFilterSets:{},automationRules: [],});let recentPatients=[];if(localData.recentPatients){try{if(typeof localData.recentPatients==='string'){const decryptedPatients=await decryptFromStorage(localData.recentPatients);if(decryptedPatients !==null){recentPatients=decryptedPatients;console.log('[Sidebar] Pacientes recentes descriptografados com sucesso');}else{console.warn('[Sidebar] Dados de pacientes recentes expiraram ou são inválidos');await browserAPI.storage.local.remove(['recentPatients','recentPatientsTimestamp']);}}else if(Array.isArray(localData.recentPatients)){recentPatients=localData.recentPatients;console.log('[Sidebar] Migrando pacientes recentes para formato criptografado');if(recentPatients.length > 0){try{const encryptedRecentPatients=await encryptForStorage(recentPatients,MEDICAL_DATA_CONFIG.DEFAULT_TTL_MINUTES * 24);await browserAPI.storage.local.set({recentPatients: encryptedRecentPatients,recentPatientsTimestamp: Date.now()});console.log('[Sidebar] Migração para formato criptografado concluída');}catch(error){console.error('[Sidebar] Erro na migração para formato criptografado:',error);}}}}catch(error){console.error('[Sidebar] Erro ao descriptografar pacientes recentes:',error);await browserAPI.storage.local.remove(['recentPatients','recentPatientsTimestamp']);}}store.setRecentPatients(recentPatients);store.setSavedFilterSets(localData.savedFilterSets);return{fieldConfigLayout: defaultFieldConfig.map((defaultField)=>{const savedField=syncData.patientFields.find((f)=> f.id===defaultField.id);return savedField ?{...defaultField,...savedField}: defaultField;}),filterLayout: syncData.filterLayout,userPreferences:{autoLoadExams: syncData.autoLoadExams,autoLoadConsultations: syncData.autoLoadConsultations,autoLoadAppointments: syncData.autoLoadAppointments,autoLoadRegulations: syncData.autoLoadRegulations,autoLoadDocuments: syncData.autoLoadDocuments,enableAutomaticDetection: syncData.enableAutomaticDetection,dateRangeDefaults: syncData.dateRangeDefaults,},sidebarSectionOrder: syncData.sidebarSectionOrder,sectionHeaderStyles: syncData.sectionHeaderStyles,};}function applySectionOrder(order){const mainContent=document.getElementById("main-content");if(!mainContent)return;const sectionMap={"patient-details": "patient-details-section",timeline: "timeline-section",regulations: "regulations-section",consultations: "consultations-section",exams: "exams-section",appointments: "appointments-section",documents: "documents-section",};const patientCardId="patient-details";const savedOrder=order && order.length > 0 ? order : Object.keys(sectionMap);let finalOrder=savedOrder.filter((id)=> id !==patientCardId);finalOrder.unshift(patientCardId);const knownIds=new Set(finalOrder);Object.keys(sectionMap).forEach((id)=>{if(!knownIds.has(id)){finalOrder.push(id);}});finalOrder.forEach((tabId)=>{const sectionId=sectionMap[tabId];const sectionElement=document.getElementById(sectionId);if(sectionElement){mainContent.appendChild(sectionElement);}});}function initializeSections(globalSettings){Object.keys(sectionConfigurations).forEach((key)=>{if(key==="patient-details")return;if(key==="timeline"){sectionManagers[key]=new TimelineManager(key,sectionConfigurations[key],globalSettings);return;}sectionManagers[key]=new SectionManager(key,sectionConfigurations[key],globalSettings);});}function applyUserPreferences(globalSettings){const{userPreferences,filterLayout}=globalSettings;const{dateRangeDefaults}=userPreferences;const sections=[ "consultations","exams","appointments","regulations","documents",];const defaultSystemRanges={consultations:{start: -6,end: 0},exams:{start: -6,end: 0},appointments:{start: -1,end: 3},regulations:{start: -12,end: 0},documents:{start: -24,end: 0},};sections.forEach((section)=>{const range=dateRangeDefaults[section] || defaultSystemRanges[section];const prefix=section.replace(/s$/,"");const initialEl=document.getElementById(`${prefix}-date-initial`);const finalEl=document.getElementById(`${prefix}-date-final`);if(initialEl)initialEl.valueAsDate=Utils.calculateRelativeDate(range.start);if(finalEl)finalEl.valueAsDate=Utils.calculateRelativeDate(range.end);});Object.values(filterLayout).flat().forEach((filterSetting)=>{const el=document.getElementById(filterSetting.id);if(el && filterSetting.defaultValue !==undefined && filterSetting.defaultValue !==null){if(el.type==="checkbox"){el.checked=filterSetting.defaultValue;}else{el.value=filterSetting.defaultValue;}}});}function setupAutoModeToggle(){const toggle=document.getElementById("auto-mode-toggle");const label=document.getElementById("auto-mode-label");browserAPI.storage.sync .get({enableAutomaticDetection: true}).then((settings)=>{toggle.checked=settings.enableAutomaticDetection;label.textContent=settings.enableAutomaticDetection ? "Auto" : "Manual";});toggle.addEventListener("change",(event)=>{const isEnabled=event.target.checked;browserAPI.storage.sync.set({enableAutomaticDetection: isEnabled});label.textContent=isEnabled ? "Auto" : "Manual";});}async function handleRegulationLoaded(regulationData){Utils.toggleLoader(true);try{currentRegulationData=regulationData;if(regulationData && regulationData.isenPKIdp && regulationData.isenPKIds){const patientInfo={idp: regulationData.isenPKIdp,ids: regulationData.isenPKIds,};await selectPatient(patientInfo);const contextName=regulationData.apcnNome || regulationData.prciNome || "Contexto";const infoBtn=document.getElementById("context-info-btn");infoBtn.title=`Contexto: ${contextName.trim()}`;infoBtn.classList.remove("hidden");await applyAutomationRules(regulationData);}else{currentRegulationData=null;Utils.showMessage("Não foi possível extrair os dados do paciente da regulação.","error");}}catch(error){currentRegulationData=null;Utils.showMessage(`Erro ao processar a regulação: ${error.message}`,"error");console.error("Erro ao processar a regulação:",error);}finally{Utils.toggleLoader(false);}}async function applyAutomationRules(regulationData){const{automationRules}=await browserAPI.storage.local.get({automationRules: [],});if(!automationRules || automationRules.length===0)return;const contextString=[ regulationData.prciNome || "",regulationData.prciCodigo || "",regulationData.apcnNome || "",regulationData.apcnCod || "",] .join(" ").toLowerCase();for(const rule of automationRules){if(rule.isActive){const hasMatch=rule.triggerKeywords.some((keyword)=> contextString.includes(keyword.toLowerCase().trim()));if(hasMatch){Object.entries(sectionManagers).forEach(([key,manager])=>{if(rule.filterSettings[key] && typeof manager.applyAutomationFilters==="function"){manager.applyAutomationFilters(rule.filterSettings[key],rule.name);}});return;}}}}function handleShowRegulationInfo(){if(!currentRegulationData){Utils.showMessage("Nenhuma informação de regulação carregada.","info");return;}const modalTitle=document.getElementById("modal-title");const modalContent=document.getElementById("modal-content");const infoModal=document.getElementById("info-modal");modalTitle.textContent="Dados da Regulação(JSON)";const formattedJson=JSON.stringify(currentRegulationData,null,2);const preElement=document.createElement("pre");preElement.className=`${getCSSClass('BG_SLATE_100')}p-2 rounded-md text-xs whitespace-pre-wrap break-all`;preElement.textContent=formattedJson;modalContent.innerHTML="";modalContent.appendChild(preElement);infoModal.classList.remove("hidden");}function addGlobalEventListeners(){console.log('[Sidebar] Adicionando event listeners globais');const mainContent=document.getElementById("main-content");const infoModal=document.getElementById("info-modal");const modalCloseBtn=document.getElementById("modal-close-btn");const infoBtn=document.getElementById("context-info-btn");const reloadBtn=document.getElementById("reload-sidebar-btn");const reloadHandler=()=>{const patient=store.getPatient();if(patient && patient.ficha){const confirmation=window.confirm("Um paciente está selecionado e o estado atual será perdido. Deseja realmente recarregar o assistente?");if(confirmation){memoryManager.cleanup();window.location.reload();}}else{memoryManager.cleanup();window.location.reload();}};const modalCloseHandler=()=> infoModal.classList.add("hidden");const modalBackdropHandler=(e)=>{if(e.target===infoModal)infoModal.classList.add("hidden");};if(reloadBtn){memoryManager.addEventListener(reloadBtn,"click",reloadHandler);}if(modalCloseBtn){memoryManager.addEventListener(modalCloseBtn,"click",modalCloseHandler);}if(infoModal){memoryManager.addEventListener(infoModal,"click",modalBackdropHandler);}if(mainContent){memoryManager.addEventListener(mainContent,"click",handleGlobalActions);}if(infoBtn){memoryManager.addEventListener(infoBtn,"click",handleShowRegulationInfo);}const storageChangeHandler=(changes,areaName)=>{if(areaName==="local" && changes.pendingRegulation){browserAPI.storage.sync .get({enableAutomaticDetection: true}).then((settings)=>{if(settings.enableAutomaticDetection){const{newValue}=changes.pendingRegulation;if(newValue && newValue.isenPKIdp){console.log("[Assistente Sidebar] Nova regulação detectada via storage.onChanged:",newValue);handleRegulationLoaded(newValue);browserAPI.storage.local.remove("pendingRegulation");}}});}if(areaName==="sync" && changes.sectionHeaderStyles){memoryManager.cleanup();window.location.reload();}if(areaName==="sync" && changes.enableAutomaticDetection){setupAutoModeToggle();}};browserAPI.storage.onChanged.addListener(storageChangeHandler);memoryManager.addCleanupCallback(()=>{console.log('[Sidebar] Removendo listener de storage');try{browserAPI.storage.onChanged.removeListener(storageChangeHandler);}catch(error){console.error('[Sidebar] Erro ao remover listener de storage:',error);}});console.log('[Sidebar] Event listeners globais adicionados');}async function handleGlobalActions(event){const target=event.target;const copyBtn=target.closest(".copy-icon");if(copyBtn){await copyToClipboard(copyBtn);return;}const examResultBtn=target.closest(".view-exam-result-btn");if(examResultBtn){await handleViewExamResult(examResultBtn);return;}const appointmentDetailsBtn=target.closest(".view-appointment-details-btn");if(appointmentDetailsBtn){await handleShowAppointmentDetailsModal(appointmentDetailsBtn);return;}const regulationDetailsBtn=target.closest(".view-regulation-details-btn");if(regulationDetailsBtn){await handleShowRegulationDetailsModal(regulationDetailsBtn);return;}const appointmentInfoBtn=target.closest(".appointment-info-btn");if(appointmentInfoBtn){handleShowAppointmentInfo(appointmentInfoBtn);return;}const documentBtn=target.closest(".view-document-btn");if(documentBtn){await handleViewDocument(documentBtn);return;}const regulationAttachmentBtn=target.closest(".view-regulation-attachment-btn");if(regulationAttachmentBtn){await handleViewRegulationAttachment(regulationAttachmentBtn);return;}}async function copyToClipboard(button){if(button.dataset.inProgress==="true")return;const textToCopy=button.dataset.copyText;if(!textToCopy)return;button.dataset.inProgress="true";try{await navigator.clipboard.writeText(textToCopy);button.textContent="✅";}catch(err){console.error("Falha ao copiar texto: ",err);button.textContent="❌";}finally{setTimeout(()=>{button.textContent="📄";button.dataset.inProgress="false";},getTimeout("AUTO_REFRESH"));}}async function updateRecentPatients(patientData){if(!patientData || !patientData.ficha)return;try{const newRecent={...patientData};const currentRecents=store.getRecentPatients();const filtered=(currentRecents || []).filter((p)=> p.ficha.isenPK.idp !==newRecent.ficha.isenPK.idp);const updatedRecents=[newRecent,...filtered].slice(0,5);const encryptedRecentPatients=await encryptForStorage(updatedRecents,MEDICAL_DATA_CONFIG.DEFAULT_TTL_MINUTES * 24);await browserAPI.storage.local.set({recentPatients: encryptedRecentPatients,recentPatientsTimestamp: Date.now()});store.setRecentPatients(updatedRecents);console.log('[Sidebar] Pacientes recentes atualizados e criptografados no storage');}catch(error){console.error('[Sidebar] Erro ao atualizar pacientes recentes:',error);const currentRecents=store.getRecentPatients();const filtered=(currentRecents || []).filter((p)=> p.ficha.isenPK.idp !==patientData.ficha.isenPK.idp);const updatedRecents=[patientData,...filtered].slice(0,5);store.setRecentPatients(updatedRecents);}}async function handleViewExamResult(button){const{idp,ids}=button.dataset;const newTab=window.open("","_blank");const loadingElement=document.createElement("p");loadingElement.textContent="Carregando resultado do exame...";newTab.document.body.appendChild(loadingElement);try{const filePath=await API.fetchResultadoExame({idp,ids});const baseUrl=await API.getBaseUrl();if(filePath){const fullUrl=filePath.startsWith("http")? filePath : `${baseUrl}${filePath}`;newTab.location.href=fullUrl;}else{const messageElement=document.createElement("p");messageElement.textContent="Resultado não encontrado.";newTab.document.body.innerHTML="";newTab.document.body.appendChild(messageElement);}}catch(error){const errorElement=document.createElement("p");errorElement.textContent=`Erro: ${error.message}`;newTab.document.body.innerHTML="";newTab.document.body.appendChild(errorElement);}}async function handleViewDocument(button){const{idp,ids}=button.dataset;const newTab=window.open("","_blank");const loadingElement=document.createElement("p");loadingElement.textContent="Carregando documento...";newTab.document.body.appendChild(loadingElement);try{const docUrl=await API.fetchDocumentUrl({idp,ids});if(docUrl){newTab.location.href=docUrl;}else{const messageElement=document.createElement("p");messageElement.textContent="URL do documento não encontrada.";newTab.document.body.innerHTML="";newTab.document.body.appendChild(messageElement);}}catch(error){const errorElement=document.createElement("p");errorElement.textContent=`Erro ao carregar documento: ${error.message}`;newTab.document.body.innerHTML="";newTab.document.body.appendChild(errorElement);console.error("Falha ao visualizar documento:",error);}}async function handleViewRegulationAttachment(button){const{idp,ids}=button.dataset;const newTab=window.open("","_blank");const loadingElement=document.createElement("p");loadingElement.textContent="Carregando anexo da regulação...";newTab.document.body.appendChild(loadingElement);try{const fileUrl=await API.fetchRegulationAttachmentUrl({idp,ids});if(fileUrl){newTab.location.href=fileUrl;}else{const messageElement=document.createElement("p");messageElement.textContent="URL do anexo não encontrada.";newTab.document.body.innerHTML="";newTab.document.body.appendChild(messageElement);}}catch(error){const errorElement=document.createElement("p");errorElement.textContent=`Erro ao carregar anexo: ${error.message}`;newTab.document.body.innerHTML="";newTab.document.body.appendChild(errorElement);console.error("Falha ao visualizar anexo da regulação:",error);}}function showModal(title,content){const modal=document.getElementById("info-modal");const modalTitle=document.getElementById("modal-title");const modalContent=document.getElementById("modal-content");modalTitle.textContent=title;if(typeof content==='string'){modalContent.textContent=content;}else if(content instanceof HTMLElement){modalContent.textContent='';modalContent.appendChild(content);}else{modalContent.textContent=String(content);}modal.classList.remove("hidden");}function createDetailRowElement(label,value){if(!value || String(value).trim()==="")return null;const div=document.createElement('div');div.className=`py-2 border-b border-slate-100 flex justify-between items-start gap-4`;const labelSpan=document.createElement('span');labelSpan.className=`font-semibold ${getCSSClass('TEXT_SECONDARY')}flex-shrink-0`;labelSpan.textContent=`${label}:`;const valueSpan=document.createElement('span');valueSpan.className=`${getCSSClass('TEXT_PRIMARY')}text-right break-words`;valueSpan.textContent=String(value);div.appendChild(labelSpan);div.appendChild(valueSpan);return div;}function createRegulationDetailsElement(data){if(!data){const p=document.createElement('p');p.textContent='Dados da regulação não encontrados.';return p;}const container=document.createElement('div');const details=[{label: 'Status',value: data.reguStatus},{label: 'Tipo',value: data.reguTipo==="ENC" ? "Consulta" : "Exame"},{label: 'Data Solicitação',value: data.reguDataStr},{label: 'Procedimento',value: data.prciNome},{label: 'CID',value: `${data.tcidCod}- ${data.tcidDescricao}`},{label: 'Profissional Sol.',value: data.prsaEntiNome},{label: 'Unidade Sol.',value: data.limoSolicitanteNome},{label: 'Unidade Desejada',value: data.limoDesejadaNome},{label: 'Gravidade',value: data.reguGravidade}];details.forEach(detail=>{const row=createDetailRowElement(detail.label,detail.value);if(row)container.appendChild(row);});if(data.reguJustificativa && data.reguJustificativa !=="null"){const justDiv=document.createElement('div');justDiv.className='py-2';const justLabel=document.createElement('span');justLabel.className=`font-semibold ${getCSSClass('TEXT_SECONDARY')}`;justLabel.textContent='Justificativa:';const justText=document.createElement('p');justText.className=`${getCSSClass('TEXT_PRIMARY')}whitespace-pre-wrap mt-1 p-2 ${getCSSClass('BG_SLATE_50')}rounded`;justText.textContent=data.reguJustificativa.replace(/\\n/g,"\n");justDiv.appendChild(justLabel);justDiv.appendChild(justText);container.appendChild(justDiv);}return container;}function createAppointmentDetailsElement(data){if(!data){const p=document.createElement('p');p.textContent='Dados do agendamento não encontrados.';return p;}const container=document.createElement('div');let status="Agendado";if(data.agcoIsCancelado==="t")status="Cancelado";else if(data.agcoIsFaltante==="t")status="Faltou";else if(data.agcoIsAtendido==="t")status="Atendido";const details=[{label: 'Status',value: status},{label: 'Data',value: `${data.agcoData}às ${data.agcoHoraPrevista}`},{label: 'Local',value: data.unidadeSaudeDestino?.entidade?.entiNome},{label: 'Profissional',value: data.profissionalDestino?.entidadeFisica?.entidade?.entiNome},{label: 'Especialidade',value: data.atividadeProfissionalCnes?.apcnNome},{label: 'Procedimento',value: data.procedimento?.prciNome},{label: 'Convênio',value: data.convenio?.entidade?.entiNome}];details.forEach(detail=>{const row=createDetailRowElement(detail.label,detail.value);if(row)container.appendChild(row);});if(data.agcoObs){const obsDiv=document.createElement('div');obsDiv.className='py-2';const obsLabel=document.createElement('span');obsLabel.className=`font-semibold ${getCSSClass('TEXT_SECONDARY')}`;obsLabel.textContent='Observação:';const obsText=document.createElement('p');obsText.className=`${getCSSClass('TEXT_PRIMARY')}whitespace-pre-wrap mt-1 p-2 ${getCSSClass('BG_SLATE_50')}rounded`;obsText.textContent=data.agcoObs;obsDiv.appendChild(obsLabel);obsDiv.appendChild(obsText);container.appendChild(obsDiv);}return container;}function createExamAppointmentDetailsElement(data){if(!data){const p=document.createElement('p');p.textContent='Dados do agendamento de exame não encontrados.';return p;}const container=document.createElement('div');const details=[{label: 'Data Agendamento',value: data.examDataCad},{label: 'Unidade Origem',value: data.ligacaoModularOrigem?.limoNome},{label: 'Unidade Destino',value: data.ligacaoModularDestino?.limoNome},{label: 'Profissional Sol.',value: data.profissional?.entidadeFisica?.entidade?.entiNome},{label: 'Caráter',value: data.CaraterAtendimento?.caraDescri},{label: 'Critério',value: data.criterioExame?.critNome}];details.forEach(detail=>{const row=createDetailRowElement(detail.label,detail.value);if(row)container.appendChild(row);});return container;}function createDetailRow(label,value){if(!value || String(value).trim()==="")return "";return `<div class="py-2 border-b border-slate-100 flex justify-between items-start gap-4"> <span class="font-semibold ${getCSSClass('TEXT_SECONDARY')}flex-shrink-0">${label}:</span> <span class="${getCSSClass('TEXT_PRIMARY')}text-right break-words">${value}</span> </div>`;}function formatRegulationDetailsForModal(data){if(!data)return "<p>Dados da regulação não encontrados.</p>";let content="";content +=createDetailRow("Status",data.reguStatus);content +=createDetailRow("Tipo",data.reguTipo==="ENC" ? "Consulta" : "Exame");content +=createDetailRow("Data Solicitação",data.reguDataStr);content +=createDetailRow("Procedimento",data.prciNome);content +=createDetailRow("CID",`${data.tcidCod}- ${data.tcidDescricao}`);content +=createDetailRow("Profissional Sol.",data.prsaEntiNome);content +=createDetailRow("Unidade Sol.",data.limoSolicitanteNome);content +=createDetailRow("Unidade Desejada",data.limoDesejadaNome);content +=createDetailRow("Gravidade",data.reguGravidade);if(data.reguJustificativa && data.reguJustificativa !=="null"){content +=`<div class="py-2"> <span class="font-semibold ${getCSSClass('TEXT_SECONDARY')}">Justificativa:</span> <p class="${getCSSClass('TEXT_PRIMARY')}whitespace-pre-wrap mt-1 p-2 ${getCSSClass('BG_SLATE_50')}rounded">${data.reguJustificativa.replace(/\\n/g,"\n")}</p> </div>`;}return content;}function formatAppointmentDetailsForModal(data){if(!data)return "<p>Dados do agendamento não encontrados.</p>";let status="Agendado";if(data.agcoIsCancelado==="t")status="Cancelado";else if(data.agcoIsFaltante==="t")status="Faltou";else if(data.agcoIsAtendido==="t")status="Atendido";let content="";content +=createDetailRow("Status",status);content +=createDetailRow("Data",`${data.agcoData}às ${data.agcoHoraPrevista}`);content +=createDetailRow("Local",data.unidadeSaudeDestino?.entidade?.entiNome);content +=createDetailRow("Profissional",data.profissionalDestino?.entidadeFisica?.entidade?.entiNome);content +=createDetailRow("Especialidade",data.atividadeProfissionalCnes?.apcnNome);content +=createDetailRow("Procedimento",data.procedimento?.prciNome);content +=createDetailRow("Convênio",data.convenio?.entidade?.entiNome);if(data.agcoObs){content +=`<div class="py-2"> <span class="font-semibold ${getCSSClass('TEXT_SECONDARY')}">Observação:</span> <p class="${getCSSClass('TEXT_PRIMARY')}whitespace-pre-wrap mt-1 p-2 ${getCSSClass('BG_SLATE_50')}rounded">${data.agcoObs}</p> </div>`;}return content;}function formatExamAppointmentDetailsForModal(data){if(!data)return "<p>Dados do agendamento de exame não encontrados.</p>";let content="";content +=createDetailRow("Data Agendamento",data.examDataCad);content +=createDetailRow("Unidade Origem",data.ligacaoModularOrigem?.limoNome);content +=createDetailRow("Unidade Destino",data.ligacaoModularDestino?.limoNome);content +=createDetailRow("Profissional Sol.",data.profissional?.entidadeFisica?.entidade?.entiNome);content +=createDetailRow("Caráter",data.CaraterAtendimento?.caraDescri);content +=createDetailRow("Critério",data.criterioExame?.critNome);return content;}async function handleShowRegulationDetailsModal(button){const{idp,ids}=button.dataset;showModal("Detalhes da Regulação","Carregando...");try{const data=await API.fetchRegulationDetails({reguIdp: idp,reguIds: ids,});const contentElement=createRegulationDetailsElement(data);showModal("Detalhes da Regulação",contentElement);}catch(error){showModal("Erro",`Não foi possível carregar os detalhes: ${error.message}`);}}async function handleShowAppointmentDetailsModal(button){const{idp,ids,type}=button.dataset;const isExam=type.toUpperCase().includes("EXAME");const title=isExam ? "Detalhes do Agendamento de Exame" : "Detalhes da Consulta Agendada";showModal(title,"Carregando...");try{let data;let contentElement;if(isExam){data=await API.fetchExamAppointmentDetails({idp,ids});contentElement=createExamAppointmentDetailsElement(data);}else{data=await API.fetchAppointmentDetails({idp,ids});contentElement=createAppointmentDetailsElement(data);}showModal(title,contentElement);}catch(error){showModal("Erro",`Não foi possível carregar os detalhes: ${error.message}`);}}function handleShowAppointmentInfo(button){const data=JSON.parse(button.dataset.appointment);const modalTitle=document.getElementById("modal-title");const modalContent=document.getElementById("modal-content");const infoModal=document.getElementById("info-modal");modalTitle.textContent="Detalhes do Agendamento";modalContent.innerHTML='';const appointmentDetails=[{label: 'ID',value: data.id},{label: 'Tipo',value: data.isSpecialized ? "Especializada" : data.isOdonto ? "Odontológica" : data.type},{label: 'Status',value: data.status},{label: 'Data',value: `${data.date}às ${data.time}`},{label: 'Local',value: data.location},{label: 'Profissional',value: data.professional},{label: 'Especialidade',value: data.specialty || "N/A"},{label: 'Procedimento',value: data.description}];appointmentDetails.forEach(detail=>{const p=document.createElement('p');const strong=document.createElement('strong');strong.textContent=`${detail.label}: `;p.appendChild(strong);p.appendChild(document.createTextNode(detail.value));modalContent.appendChild(p);});infoModal.classList.remove("hidden");}async function checkForPendingRegulation(){try{const{pendingRegulation}=await browserAPI.storage.local.get("pendingRegulation");if(pendingRegulation && pendingRegulation.isenPKIdp){await handleRegulationLoaded(pendingRegulation);await browserAPI.storage.local.remove("pendingRegulation");}}catch(e){console.error("Erro ao verificar regulação pendente:",e);}}document.addEventListener("DOMContentLoaded",init);
import "./browser-polyfill.js";import{fetchRegulationDetails}from "./api.js";import{KeepAliveManager}from "./KeepAliveManager.js";import{getBrowserAPIInstance}from "./BrowserAPI.js";import{encryptForStorage,decryptFromStorage,cleanupExpiredData,MEDICAL_DATA_CONFIG}from "./crypto-utils.js";const api=getBrowserAPIInstance();let keepAliveManager=null;function initializeKeepAlive(){if(!keepAliveManager){keepAliveManager=new KeepAliveManager();console.log("[Assistente Background] KeepAliveManager inicializado");}}async function setupDataCleanup(){await cleanupExpiredData(api);api.alarms.create('cleanupExpiredData',{periodInMinutes: 30});api.alarms.onAlarm.addListener(async(alarm)=>{if(alarm.name==='cleanupExpiredData'){console.log('[Assistente Background] Executando limpeza automática de dados expirados');await cleanupExpiredData(api);}});}const messageRateLimit=new Map();const RATE_LIMIT_WINDOW=60000;const MAX_MESSAGES_PER_WINDOW=100;function checkRateLimit(senderId){const now=Date.now();const key=senderId || 'unknown';if(!messageRateLimit.has(key)){messageRateLimit.set(key,{count: 1,windowStart: now});return true;}const rateData=messageRateLimit.get(key);if(now - rateData.windowStart > RATE_LIMIT_WINDOW){messageRateLimit.set(key,{count: 1,windowStart: now});return true;}if(rateData.count >=MAX_MESSAGES_PER_WINDOW){return false;}rateData.count++;return true;}api.runtime.onMessage.addListener(async(message,sender,sendResponse)=>{const timestamp=new Date().toISOString();const senderId=sender?.id || sender?.tab?.id || 'unknown';if(!checkRateLimit(senderId)){console.warn(`[Assistente Background] ${timestamp}- Rate limit excedido para sender:`,senderId);return false;}if(!sender || !sender.tab){if(!sender.id || sender.id !==api.runtime.id){console.warn(`[Assistente Background] ${timestamp}- Mensagem rejeitada - origem não confiável:`,{senderId: sender?.id,expectedId: api.runtime.id,url: sender?.url});return false;}}else{const allowedOrigins=[ 'sigss.saude.gov.br','sigss-hom.saude.gov.br','sigss.mv.com.br','sigss.cloudmv.com.br','localhost:3000','localhost:8080','127.0.0.1' ];const senderUrl=sender.tab.url || sender.url || '';const senderOrigin=new URL(senderUrl).origin;const isAuthorized=allowedOrigins.some(domain=>{if(domain.startsWith('http')){return senderOrigin===domain;}return senderUrl.includes(domain);});if(!isAuthorized){console.warn(`[Assistente Background] ${timestamp}- Mensagem rejeitada - origem não autorizada:`,{senderUrl,senderOrigin,allowedOrigins,tabId: sender.tab.id});return false;}}if(!message || typeof message !=='object' || !message.type){console.warn(`[Assistente Background] ${timestamp}- Mensagem rejeitada - estrutura inválida:`,{message,messageType: typeof message,hasType: message?.type,senderId});return false;}const allowedMessageTypes=[ 'SAVE_REGULATION_DATA','GET_KEEPALIVE_STATUS','GET_PATIENT_DATA','VALIDATE_CNS','VALIDATE_CPF','CLEAR_CACHE' ];if(!allowedMessageTypes.includes(message.type)){console.warn(`[Assistente Background] ${timestamp}- Tipo de mensagem não permitido:`,{messageType: message.type,allowedTypes: allowedMessageTypes,senderId});return false;}console.log(`[Assistente Background] ${timestamp}- Mensagem autorizada:`,{type: message.type,senderId,origin: sender?.tab?.url || sender?.url || 'extension'});if(message.type==="SAVE_REGULATION_DATA"){console.log("[Assistente Background] Recebido pedido para salvar dados da regulação:",message.payload);try{const regulationDetails=await fetchRegulationDetails(message.payload);if(regulationDetails){const encryptedData=await encryptForStorage(regulationDetails,MEDICAL_DATA_CONFIG.SENSITIVE_TTL_MINUTES);await api.storage.local.set({pendingRegulation: encryptedData,pendingRegulationTimestamp: Date.now()});console.log("[Assistente Background] Detalhes da regulação salvos criptografados no storage local");}else{console.warn("[Assistente Background] Não foram encontrados detalhes para a regulação:",message.payload);}}catch(e){console.error("[Assistente Background] Falha ao buscar ou salvar dados da regulação:",e);}return true;}if(message.type==="GET_KEEPALIVE_STATUS"){if(keepAliveManager){const status=await keepAliveManager.getStatus();sendResponse(status);}else{sendResponse({isActive: false,error: "KeepAliveManager não inicializado"});}return true;}console.warn("[Assistente Background] Tipo de mensagem não reconhecido:",message.type);return false;});async function openSidebar(tab){if(api.sidePanel){await api.sidePanel.open({windowId: tab.windowId});}else if(api.sidebarAction){await api.sidebarAction.toggle();}}api.action.onClicked.addListener(openSidebar);initializeKeepAlive();setupDataCleanup();api.runtime.onStartup.addListener(()=>{console.log("[Assistente Background] Service worker reiniciado - reinicializando KeepAlive");initializeKeepAlive();setupDataCleanup();});api.runtime.onInstalled.addListener((details)=>{console.log("[Assistente Background] Extensão instalada/atualizada - inicializando KeepAlive");initializeKeepAlive();setupDataCleanup();if(api.sidePanel){api.sidePanel .setPanelBehavior({openPanelOnActionClick: false}).catch((e)=> console.error("Falha ao definir o comportamento do sidePanel:",e));}api.contextMenus.create({id: "openSidePanel",title: "Alternar Assistente de Regulação",contexts: ["all"],});api.contextMenus.onClicked.addListener((info,tab)=>{if(info.menuItemId==="openSidePanel"){openSidebar(tab);}});if(details.reason==="install"){api.tabs.create({url: api.runtime.getURL("help.html")});}});
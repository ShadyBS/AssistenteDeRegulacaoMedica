const api=globalThis.browser || globalThis.chrome;let fetchRegulationDetails,KeepAliveManager,getBrowserAPIInstance;let encryptForStorage,decryptFromStorage,cleanupExpiredData,MEDICAL_DATA_CONFIG;let createComponentLogger,logger;let keepAliveManager=null;const messageRateLimit=new Map();const RATE_LIMIT_WINDOW=60000;const MAX_MESSAGES_PER_WINDOW=100;async function loadModules(){console.log('[Background] Carregando módulos...');try{const apiModule=await import("./api.js");fetchRegulationDetails=apiModule.fetchRegulationDetails;const keepAliveModule=await import("./KeepAliveManager.js");KeepAliveManager=keepAliveModule.KeepAliveManager;const browserAPIModule=await import("./BrowserAPI.js");getBrowserAPIInstance=browserAPIModule.getBrowserAPIInstance;const cryptoModule=await import("./crypto-utils.js");encryptForStorage=cryptoModule.encryptForStorage;decryptFromStorage=cryptoModule.decryptFromStorage;cleanupExpiredData=cryptoModule.cleanupExpiredData;MEDICAL_DATA_CONFIG=cryptoModule.MEDICAL_DATA_CONFIG;const loggerModule=await import("./logger.js");createComponentLogger=loggerModule.createComponentLogger;logger=createComponentLogger('Background');logger.info('Módulos carregados com sucesso');return true;}catch(error){const log=logger || console;log.error('Erro ao carregar módulos:',error);return false;}}function checkRateLimit(senderId){const now=Date.now();const key=senderId || 'unknown';if(!messageRateLimit.has(key)){messageRateLimit.set(key,{count: 1,windowStart: now});return true;}const rateData=messageRateLimit.get(key);if(now - rateData.windowStart > RATE_LIMIT_WINDOW){messageRateLimit.set(key,{count: 1,windowStart: now});return true;}if(rateData.count >=MAX_MESSAGES_PER_WINDOW){return false;}rateData.count++;return true;}function initializeKeepAlive(){if(!keepAliveManager && KeepAliveManager){try{keepAliveManager=new KeepAliveManager();logger.info("KeepAliveManager inicializado",{operation: 'initializeKeepAlive'});}catch(error){logger.error('Erro ao inicializar KeepAliveManager:',error);}}}async function setupDataCleanup(){if(!cleanupExpiredData)return;try{await cleanupExpiredData(api);api.alarms.create('cleanupExpiredData',{periodInMinutes: 30});logger.info('Sistema de limpeza automática configurado');}catch(error){logger.error('Erro ao configurar limpeza de dados:',error);}}api.alarms.onAlarm.addListener(async(alarm)=>{if(alarm.name==='cleanupExpiredData' && cleanupExpiredData){try{logger.info('Executando limpeza automática de dados expirados',{operation: 'setupDataCleanup',alarmName: alarm.name});await cleanupExpiredData(api);}catch(error){logger.error('Erro na limpeza automática:',error);}}});api.runtime.onMessage.addListener(async(message,sender,sendResponse)=>{const timestamp=new Date().toISOString();const senderId=sender?.id || sender?.tab?.id || 'unknown';if(!checkRateLimit(senderId)){logger.warn('Rate limit excedido para sender:',{senderId});return false;}if(!sender || !sender.tab){if(!sender.id || sender.id !==api.runtime.id){logger.warn('Mensagem rejeitada - origem não confiável(não é da extensão)');return false;}}else{const senderUrl=sender.tab.url || sender.url || '';let isAuthorized=false;let rejectionReason='';try{const urlObj=new URL(senderUrl);const hostname=urlObj.hostname.toLowerCase();const authorizedSuffixes=[ 'gov.br','mv.com.br','cloudmv.com.br' ];const localhostPatterns=[ 'localhost','127.0.0.1' ];isAuthorized=authorizedSuffixes.some(suffix=>{return hostname===suffix || hostname.endsWith('.' + suffix);});if(!isAuthorized){isAuthorized=localhostPatterns.some(pattern=>{return hostname===pattern || hostname.startsWith(pattern + ':');});}if(!isAuthorized){rejectionReason=`Domínio '${hostname}' não termina com sufixos autorizados: ${authorizedSuffixes.join(',')}ou localhost/127.0.0.1`;}}catch(urlError){isAuthorized=false;rejectionReason=`URL inválida: ${urlError.message}`;}if(!isAuthorized){logger.warn('Mensagem rejeitada - origem não autorizada:',{senderUrl,rejectionReason,operation: 'validateMessageOrigin'});return false;}logger.debug('Origem autorizada validada:',{senderUrl,hostname: new URL(senderUrl).hostname,operation: 'validateMessageOrigin'});}if(!message || typeof message !=='object' || !message.type){logger.warn('Mensagem rejeitada - estrutura inválida',{message});return false;}const allowedMessageTypes=[ 'SAVE_REGULATION_DATA','GET_KEEPALIVE_STATUS','GET_PATIENT_DATA','VALIDATE_CNS','VALIDATE_CPF','CLEAR_CACHE' ];if(!allowedMessageTypes.includes(message.type)){logger.warn('Tipo de mensagem não permitido:',{type: message.type});return false;}logger.info('Mensagem autorizada:',{type: message.type,senderId,origin: sender?.tab?.url || sender?.url || 'extension'});if(message.type==="SAVE_REGULATION_DATA"){if(!fetchRegulationDetails){logger.error('fetchRegulationDetails não disponível');return false;}try{const regulationDetails=await fetchRegulationDetails(message.payload);if(regulationDetails){if(encryptForStorage && MEDICAL_DATA_CONFIG){const encryptedData=await encryptForStorage(regulationDetails,MEDICAL_DATA_CONFIG.SENSITIVE_TTL_MINUTES);await api.storage.local.set({pendingRegulation: encryptedData,pendingRegulationTimestamp: Date.now()});}else{await api.storage.local.set({pendingRegulation: regulationDetails,pendingRegulationTimestamp: Date.now()});}logger.info('Detalhes da regulação salvos no storage local');}else{logger.warn('Não foram encontrados detalhes para a regulação:',message.payload);}}catch(e){logger.error('Falha ao buscar ou salvar dados da regulação:',e);}return true;}if(message.type==="GET_KEEPALIVE_STATUS"){if(keepAliveManager){try{const status=await keepAliveManager.getStatus();sendResponse(status);}catch(error){sendResponse({isActive: false,error: error.message});}}else{sendResponse({isActive: false,error: "KeepAliveManager não inicializado"});}return true;}logger.warn('Tipo de mensagem não reconhecido:',{type: message.type});return false;});async function openSidebar(tab){try{const isFirefox=typeof globalThis.browser !=='undefined' && !globalThis.chrome;const isChrome=typeof globalThis.chrome !=='undefined';logger.info('Tentando abrir sidebar/sidePanel',{operation: 'openSidebar',browser: isFirefox ? 'Firefox' : isChrome ? 'Chrome/Edge' : 'Unknown',hasSidePanel: !!api.sidePanel,hasSidebarAction: !!api.sidebarAction,tabId: tab?.id,windowId: tab?.windowId});if(api.sidePanel && typeof api.sidePanel.open==='function'){logger.debug('Usando Chrome sidePanel API');await api.sidePanel.open({windowId: tab.windowId});logger.info('SidePanel aberto com sucesso no Chrome/Edge');return;}if(api.sidebarAction && typeof api.sidebarAction.open==='function'){logger.debug('Usando Firefox sidebarAction.open API');await api.sidebarAction.open();logger.info('Sidebar aberto com sucesso no Firefox');return;}if(api.sidebarAction && typeof api.sidebarAction.toggle==='function'){logger.debug('Usando Firefox sidebarAction.toggle API como fallback');await api.sidebarAction.toggle();logger.info('Sidebar alternado com sucesso no Firefox(fallback)');return;}if(api.windows && api.windows.create){logger.warn('Nenhuma API de sidebar disponível,abrindo como popup');await api.windows.create({url: api.runtime.getURL('sidebar.html'),type: 'popup',width: 400,height: 600,focused: true});logger.info('Sidebar aberto como popup(fallback final)');return;}throw new Error('Nenhuma API de sidebar/sidePanel disponível');}catch(error){logger.error('Erro ao abrir sidebar/sidePanel:',{error: error.message,stack: error.stack,tabId: tab?.id,windowId: tab?.windowId,availableAPIs:{sidePanel: !!api.sidePanel,sidebarAction: !!api.sidebarAction,windows: !!api.windows}});try{if(api.tabs && api.tabs.create){logger.warn('Tentando fallback final: abrir sidebar como nova aba');await api.tabs.create({url: api.runtime.getURL('sidebar.html'),active: true});logger.info('Sidebar aberto como nova aba(fallback de emergência)');}}catch(fallbackError){logger.error('Fallback final também falhou:',fallbackError);}}}api.action.onClicked.addListener(openSidebar);api.runtime.onStartup.addListener(async()=>{logger.info('Service worker reiniciado - reinicializando');await initializeExtension();});api.runtime.onInstalled.addListener(async(details)=>{logger.info('Extensão instalada/atualizada',{reason: details.reason});await initializeExtension();if(api.sidePanel){try{await api.sidePanel.setPanelBehavior({openPanelOnActionClick: false});}catch(e){logger.error('Falha ao definir o comportamento do sidePanel:',e);}}try{api.contextMenus.create({id: "openSidePanel",title: "Alternar Assistente de Regulação",contexts: ["all"],});}catch(error){logger.error('Erro ao criar menu de contexto:',error);}api.contextMenus.onClicked.addListener((info,tab)=>{if(info.menuItemId==="openSidePanel"){openSidebar(tab);}});if(details.reason==="install"){try{api.tabs.create({url: api.runtime.getURL("help.html")});}catch(error){logger.error('Erro ao abrir página de ajuda:',error);}}});async function initializeExtension(){console.log('[Background] Iniciando extensão...');try{const modulesLoaded=await loadModules();if(modulesLoaded){initializeKeepAlive();await setupDataCleanup();logger.info('[Background] Inicialização completa');}else{const log=logger || console;log.error('Falha ao carregar módulos - extensão pode não funcionar corretamente');}}catch(error){const log=logger || console;log.error('Erro na inicialização:',error);}}
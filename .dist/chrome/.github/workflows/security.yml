# Security Workflow - Assistente de Regula√ß√£o M√©dica
# 
# Workflow autom√°tico para verifica√ß√µes de seguran√ßa
# Executa dependency scanning, code analysis e valida√ß√µes espec√≠ficas para extens√µes

name: üîí Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executa toda segunda-feira √†s 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      deep_scan:
        description: 'Enable deep security scan'
        required: false
        default: false
        type: boolean

# Configura√ß√µes globais
env:
  NODE_VERSION: '18.x'

# Permiss√µes necess√°rias
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # === JOB 1: DEPENDENCY SCANNING ===
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed"
      
      - name: üîí Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Processa resultados
          VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "No vulnerabilities data")
          
          echo "### üì¶ Dependency Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "$VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          # Verifica se h√° vulnerabilidades cr√≠ticas
          CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          HIGH=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
          
          if [[ "$CRITICAL" -gt 0 || "$HIGH" -gt 0 ]]; then
            echo "‚ùå Critical or high vulnerabilities found!"
            echo "Critical: $CRITICAL, High: $HIGH"
            exit 1
          else
            echo "‚úÖ No critical or high vulnerabilities found"
          fi
      
      - name: üìã Upload Audit Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

  # === JOB 2: CODE SECURITY ANALYSIS ===
  code-analysis:
    name: üîç Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîí Run Security Validation
        run: |
          echo "üîç Running security validation..."
          npm run validate -- --skip-linting
          echo "‚úÖ Security validation completed"
      
      - name: üîç Manual Security Checks
        run: |
          echo "üîç Running manual security checks..."
          
          # Busca por padr√µes inseguros
          echo "### üîí Security Pattern Analysis" >> $GITHUB_STEP_SUMMARY
          
          # innerHTML usage
          INNERHTML_COUNT=$(grep -r "innerHTML" --include="*.js" . | wc -l || echo "0")
          echo "- **innerHTML usage**: $INNERHTML_COUNT occurrences" >> $GITHUB_STEP_SUMMARY
          
          # eval usage
          EVAL_COUNT=$(grep -r "eval(" --include="*.js" . | wc -l || echo "0")
          echo "- **eval() usage**: $EVAL_COUNT occurrences" >> $GITHUB_STEP_SUMMARY
          
          # document.write usage
          DOCWRITE_COUNT=$(grep -r "document.write" --include="*.js" . | wc -l || echo "0")
          echo "- **document.write usage**: $DOCWRITE_COUNT occurrences" >> $GITHUB_STEP_SUMMARY
          
          # javascript: URLs
          JSURL_COUNT=$(grep -r "javascript:" --include="*.js" . | wc -l || echo "0")
          echo "- **javascript: URLs**: $JSURL_COUNT occurrences" >> $GITHUB_STEP_SUMMARY
          
          # Direct chrome API usage
          CHROME_API_COUNT=$(grep -r "chrome\." --include="*.js" . | grep -v "globalThis.browser || globalThis.chrome" | wc -l || echo "0")
          echo "- **Direct chrome.* API usage**: $CHROME_API_COUNT occurrences" >> $GITHUB_STEP_SUMMARY
          
          # Verifica se h√° problemas cr√≠ticos
          if [[ "$EVAL_COUNT" -gt 0 ]]; then
            echo "‚ùå eval() usage detected - forbidden in Manifest V3!"
            exit 1
          fi
          
          if [[ "$INNERHTML_COUNT" -gt 5 ]]; then
            echo "‚ö†Ô∏è High innerHTML usage detected - review for XSS vulnerabilities"
          fi
          
          echo "‚úÖ Manual security checks completed"

  # === JOB 3: MANIFEST SECURITY VALIDATION ===
  manifest-security:
    name: üìÑ Manifest Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üìÑ Validate Manifests
        run: |
          echo "üìÑ Validating manifest security..."
          npm run validate:manifests
          echo "‚úÖ Manifest validation completed"
      
      - name: üîí Manifest Security Analysis
        run: |
          echo "üîí Analyzing manifest security..."
          
          echo "### üìÑ Manifest Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Analisa manifest.json (Firefox)
          if [[ -f "manifest.json" ]]; then
            echo "#### Firefox Manifest (manifest.json)" >> $GITHUB_STEP_SUMMARY
            
            # Verifica permiss√µes
            PERMISSIONS=$(cat manifest.json | jq -r '.permissions[]?' 2>/dev/null || echo "")
            HOST_PERMISSIONS=$(cat manifest.json | jq -r '.host_permissions[]?' 2>/dev/null || echo "")
            
            echo "**Permissions:**" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$PERMISSIONS" ]]; then
              echo "$PERMISSIONS" | while read -r perm; do
                if [[ -n "$perm" ]]; then
                  echo "- $perm" >> $GITHUB_STEP_SUMMARY
                fi
              done
            else
              echo "- None" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Host Permissions:**" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$HOST_PERMISSIONS" ]]; then
              echo "$HOST_PERMISSIONS" | while read -r perm; do
                if [[ -n "$perm" ]]; then
                  echo "- $perm" >> $GITHUB_STEP_SUMMARY
                  
                  # Verifica permiss√µes amplas
                  if [[ "$perm" == "*://*/*" || "$perm" == "<all_urls>" ]]; then
                    echo "‚ö†Ô∏è Broad host permission detected: $perm"
                  fi
                fi
              done
            else
              echo "- None" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analisa manifest-edge.json (Chrome)
          if [[ -f "manifest-edge.json" ]]; then
            echo "#### Chrome Manifest (manifest-edge.json)" >> $GITHUB_STEP_SUMMARY
            
            # Verifica permiss√µes
            PERMISSIONS=$(cat manifest-edge.json | jq -r '.permissions[]?' 2>/dev/null || echo "")
            HOST_PERMISSIONS=$(cat manifest-edge.json | jq -r '.host_permissions[]?' 2>/dev/null || echo "")
            
            echo "**Permissions:**" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$PERMISSIONS" ]]; then
              echo "$PERMISSIONS" | while read -r perm; do
                if [[ -n "$perm" ]]; then
                  echo "- $perm" >> $GITHUB_STEP_SUMMARY
                fi
              done
            else
              echo "- None" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Host Permissions:**" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$HOST_PERMISSIONS" ]]; then
              echo "$HOST_PERMISSIONS" | while read -r perm; do
                if [[ -n "$perm" ]]; then
                  echo "- $perm" >> $GITHUB_STEP_SUMMARY
                fi
              done
            else
              echo "- None" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "‚úÖ Manifest security analysis completed"

  # === JOB 4: SECRETS SCANNING ===
  secrets-scan:
    name: üîê Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîê Scan for Secrets
        run: |
          echo "üîê Scanning for potential secrets..."
          
          # Padr√µes de secrets comuns
          declare -A patterns=(
            ["API Keys"]="[Aa][Pp][Ii][_-]?[Kk][Ee][Yy].*['\"][0-9a-zA-Z]{32,}['\"]"
            ["Tokens"]="[Tt][Oo][Kk][Ee][Nn].*['\"][0-9a-zA-Z]{32,}['\"]"
            ["Passwords"]="[Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd].*['\"][^'\"]{8,}['\"]"
            ["Private Keys"]="-----BEGIN [A-Z]+ PRIVATE KEY-----"
            ["AWS Keys"]="AKIA[0-9A-Z]{16}"
            ["GitHub Tokens"]="ghp_[0-9a-zA-Z]{36}"
          )
          
          echo "### üîê Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
          
          SECRETS_FOUND=0
          
          for pattern_name in "${!patterns[@]}"; do
            pattern="${patterns[$pattern_name]}"
            
            # Busca o padr√£o, excluindo arquivos espec√≠ficos
            matches=$(grep -r -E "$pattern" . \
              --exclude-dir=node_modules \
              --exclude-dir=.git \
              --exclude-dir=dist \
              --exclude-dir=dist-zips \
              --exclude="*.log" \
              --exclude="*.md" \
              2>/dev/null || true)
            
            if [[ -n "$matches" ]]; then
              echo "‚ö†Ô∏è Potential $pattern_name found:"
              echo "$matches"
              echo "- **$pattern_name**: ‚ö†Ô∏è Potential matches found" >> $GITHUB_STEP_SUMMARY
              SECRETS_FOUND=$((SECRETS_FOUND + 1))
            else
              echo "- **$pattern_name**: ‚úÖ None found" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [[ $SECRETS_FOUND -gt 0 ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Warning**: Potential secrets detected. Please review the matches above." >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Potential secrets found in code!"
            exit 1
          else
            echo "‚úÖ No secrets detected"
          fi

  # === JOB 5: DEEP SECURITY SCAN (OPCIONAL) ===
  deep-scan:
    name: üïµÔ∏è Deep Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.deep_scan == 'true' || github.event_name == 'schedule'
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üïµÔ∏è Deep Code Analysis
        run: |
          echo "üïµÔ∏è Running deep security analysis..."
          
          # An√°lise de complexidade e poss√≠veis vulnerabilidades
          echo "### üïµÔ∏è Deep Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Conta fun√ß√µes com alta complexidade
          COMPLEX_FUNCTIONS=$(grep -r "function\|=>" --include="*.js" . | wc -l || echo "0")
          echo "- **Total Functions**: $COMPLEX_FUNCTIONS" >> $GITHUB_STEP_SUMMARY
          
          # Busca por padr√µes suspeitos
          SUSPICIOUS_PATTERNS=0
          
          # Fun√ß√µes que podem ser problem√°ticas
          if grep -r "setTimeout.*eval\|setInterval.*eval" --include="*.js" . >/dev/null 2>&1; then
            echo "- **Suspicious Pattern**: ‚ö†Ô∏è setTimeout/setInterval with eval detected" >> $GITHUB_STEP_SUMMARY
            SUSPICIOUS_PATTERNS=$((SUSPICIOUS_PATTERNS + 1))
          fi
          
          # Uso de Function constructor
          if grep -r "new Function\|Function(" --include="*.js" . >/dev/null 2>&1; then
            echo "- **Suspicious Pattern**: ‚ö†Ô∏è Function constructor usage detected" >> $GITHUB_STEP_SUMMARY
            SUSPICIOUS_PATTERNS=$((SUSPICIOUS_PATTERNS + 1))
          fi
          
          # Acesso a propriedades din√¢micas suspeitas
          if grep -r "\[.*\+.*\]\|window\[" --include="*.js" . >/dev/null 2>&1; then
            echo "- **Suspicious Pattern**: ‚ö†Ô∏è Dynamic property access detected" >> $GITHUB_STEP_SUMMARY
            SUSPICIOUS_PATTERNS=$((SUSPICIOUS_PATTERNS + 1))
          fi
          
          if [[ $SUSPICIOUS_PATTERNS -eq 0 ]]; then
            echo "- **Suspicious Patterns**: ‚úÖ None detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ Deep security analysis completed"

  # === JOB 6: SECURITY REPORT ===
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, manifest-security, secrets-scan]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: üìä Generate Security Report
        run: |
          echo "# üîí Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéØ Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Analysis**: ${{ needs.code-analysis.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Manifest Security**: ${{ needs.manifest-security.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Scan**: ${{ needs.secrets-scan.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status geral
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-analysis.result }}" == "success" && "${{ needs.manifest-security.result }}" == "success" && "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "## üéâ Overall Security Status: ‚úÖ SECURE" >> $GITHUB_STEP_SUMMARY
            echo "All security scans passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ö†Ô∏è Overall Security Status: ISSUES DETECTED" >> $GITHUB_STEP_SUMMARY
            echo "Some security scans detected issues. Please review the detailed results above." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üéØ Set Final Status
        run: |
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-analysis.result }}" == "success" && "${{ needs.manifest-security.result }}" == "success" && "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security scan completed successfully"
            exit 0
          else
            echo "‚ùå Security scan detected issues"
            exit 1
          fi
# üîí PIPELINE DE SEGURAN√áA - ASSISTENTE DE REGULA√á√ÉO M√âDICA
# 
# Pipeline especializado em seguran√ßa para Browser Extension
# Scanning de vulnerabilidades, an√°lise de c√≥digo, valida√ß√£o de permiss√µes
# Compliance com pol√≠ticas de seguran√ßa das stores e LGPD/GDPR

name: üîí Security Scanning

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.js'
      - '**.json'
      - 'manifest*.json'
      - 'package*.json'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.js'
      - '**.json'
      - 'manifest*.json'
      - 'package*.json'
  schedule:
    # Executar toda segunda-feira √†s 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - deep
          - critical-only
      include_dependencies:
        description: 'Include dependency scanning'
        required: false
        default: true
        type: boolean

# Configura√ß√µes globais
env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: 'v2'
  SECURITY_SCAN_LEVEL: ${{ github.event.inputs.scan_level || 'standard' }}

# Permiss√µes necess√°rias
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

# Configura√ß√£o de concorr√™ncia
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===================================================================
  # STAGE 1: AN√ÅLISE DE DEPEND√äNCIAS
  # ===================================================================
  
  dependency-security:
    name: üîç Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          echo "‚úÖ Dependencies installed for security scanning"
      
      - name: üîí npm Audit Scan
        run: |
          echo "üîí Running npm audit scan..."
          
          # Executar audit com diferentes n√≠veis
          if [ "${{ env.SECURITY_SCAN_LEVEL }}" = "critical-only" ]; then
            AUDIT_LEVEL="critical"
          elif [ "${{ env.SECURITY_SCAN_LEVEL }}" = "deep" ]; then
            AUDIT_LEVEL="low"
          else
            AUDIT_LEVEL="moderate"
          fi
          
          echo "üìã Audit level: $AUDIT_LEVEL"
          
          # Executar audit e salvar resultado
          npm audit --audit-level=$AUDIT_LEVEL --json > npm-audit.json || true
          npm audit --audit-level=$AUDIT_LEVEL
          
          # Analisar resultados
          VULNERABILITIES=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total // 0')
          CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "üìä Vulnerability Summary:"
          echo "- Total: $VULNERABILITIES"
          echo "- Critical: $CRITICAL"
          echo "- High: $HIGH"
          
          # Falhar se vulnerabilidades cr√≠ticas
          if [ "$CRITICAL" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found: $CRITICAL"
            exit 1
          fi
          
          echo "‚úÖ npm audit scan completed"
      
      - name: üìä Dependency Analysis
        run: |
          echo "üìä Analyzing dependency tree..."
          
          # Listar depend√™ncias diretas
          echo "üìã Direct Dependencies:"
          npm list --depth=0 --json | jq -r '.dependencies | keys[]' | head -10
          
          # Verificar depend√™ncias desatualizadas
          echo "üìã Outdated Dependencies:"
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            cat outdated.json | jq -r 'keys[]' | while read pkg; do
              CURRENT=$(cat outdated.json | jq -r ".[\"$pkg\"].current")
              WANTED=$(cat outdated.json | jq -r ".[\"$pkg\"].wanted")
              LATEST=$(cat outdated.json | jq -r ".[\"$pkg\"].latest")
              echo "- $pkg: $CURRENT ‚Üí $WANTED (latest: $LATEST)"
            done
          else
            echo "‚úÖ All dependencies are up to date"
          fi
          
          echo "‚úÖ Dependency analysis completed"
      
      - name: üîç License Compliance Check
        run: |
          echo "üîç Checking license compliance..."
          
          # Verificar licen√ßas das depend√™ncias
          npm list --json | jq -r '
            .. | objects | 
            select(has("license")) | 
            "\(.name // "unknown"): \(.license // "unknown")"
          ' | sort | uniq > licenses.txt
          
          echo "üìã Found licenses:"
          cat licenses.txt | head -20
          
          # Verificar licen√ßas problem√°ticas
          PROBLEMATIC_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" licenses.txt; then
              echo "‚ö†Ô∏è Potentially problematic license found: $license"
            fi
          done
          
          echo "‚úÖ License compliance check completed"
      
      - name: üì§ Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: |
            npm-audit.json
            outdated.json
            licenses.txt
          retention-days: 30

  # ===================================================================
  # STAGE 2: AN√ÅLISE DE C√ìDIGO EST√ÅTICO
  # ===================================================================
  
  static-code-analysis:
    name: üîç Static Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit --no-fund
      
      - name: üîí Security-focused ESLint
        run: |
          echo "üîí Running security-focused ESLint..."
          
          # Executar ESLint com foco em seguran√ßa
          npx eslint . --ext .js --format json --output-file eslint-security.json || true
          npx eslint . --ext .js
          
          echo "‚úÖ ESLint security scan completed"
      
      - name: üîç Code Pattern Security Analysis
        run: |
          echo "üîç Analyzing code patterns for security issues..."
          
          # Verificar padr√µes inseguros
          echo "üìã Security Pattern Analysis:"
          
          # 1. innerHTML usage
          INNER_HTML=$(grep -r "innerHTML" --include="*.js" . --exclude-dir=node_modules | wc -l)
          echo "- innerHTML usage: $INNER_HTML occurrences"
          if [ "$INNER_HTML" -gt 0 ]; then
            echo "‚ö†Ô∏è innerHTML usage detected - verify sanitization"
            grep -r "innerHTML" --include="*.js" . --exclude-dir=node_modules | head -5
          fi
          
          # 2. eval() usage
          EVAL_USAGE=$(grep -r "eval(" --include="*.js" . --exclude-dir=node_modules | wc -l)
          echo "- eval() usage: $EVAL_USAGE occurrences"
          if [ "$EVAL_USAGE" -gt 0 ]; then
            echo "‚ùå eval() usage detected - security risk"
            grep -r "eval(" --include="*.js" . --exclude-dir=node_modules
            exit 1
          fi
          
          # 3. document.write usage
          DOC_WRITE=$(grep -r "document.write" --include="*.js" . --exclude-dir=node_modules | wc -l)
          echo "- document.write usage: $DOC_WRITE occurrences"
          if [ "$DOC_WRITE" -gt 0 ]; then
            echo "‚ö†Ô∏è document.write usage detected"
            grep -r "document.write" --include="*.js" . --exclude-dir=node_modules | head -3
          fi
          
          # 4. Hardcoded secrets/tokens
          SECRET_PATTERNS=("password" "token" "secret" "key" "api_key")
          for pattern in "${SECRET_PATTERNS[@]}"; do
            MATCHES=$(grep -ri "$pattern.*=" --include="*.js" . --exclude-dir=node_modules | grep -v "console.log" | wc -l)
            if [ "$MATCHES" -gt 0 ]; then
              echo "‚ö†Ô∏è Potential hardcoded $pattern detected: $MATCHES matches"
            fi
          done
          
          # 5. HTTP URLs (should be HTTPS)
          HTTP_URLS=$(grep -r "http://" --include="*.js" --include="*.json" . --exclude-dir=node_modules | wc -l)
          echo "- HTTP URLs: $HTTP_URLS occurrences"
          if [ "$HTTP_URLS" -gt 0 ]; then
            echo "‚ö†Ô∏è HTTP URLs detected - prefer HTTPS"
            grep -r "http://" --include="*.js" --include="*.json" . --exclude-dir=node_modules | head -3
          fi
          
          echo "‚úÖ Code pattern analysis completed"
      
      - name: üîê Cryptographic Analysis
        run: |
          echo "üîê Analyzing cryptographic usage..."
          
          # Verificar uso de criptografia
          CRYPTO_PATTERNS=("crypto" "encrypt" "decrypt" "hash" "sha" "md5")
          
          echo "üìã Cryptographic Usage:"
          for pattern in "${CRYPTO_PATTERNS[@]}"; do
            MATCHES=$(grep -ri "$pattern" --include="*.js" . --exclude-dir=node_modules | wc -l)
            if [ "$MATCHES" -gt 0 ]; then
              echo "- $pattern: $MATCHES occurrences"
            fi
          done
          
          # Verificar algoritmos fracos
          WEAK_CRYPTO=("md5" "sha1" "des" "rc4")
          for weak in "${WEAK_CRYPTO[@]}"; do
            WEAK_MATCHES=$(grep -ri "$weak" --include="*.js" . --exclude-dir=node_modules | wc -l)
            if [ "$WEAK_MATCHES" -gt 0 ]; then
              echo "‚ö†Ô∏è Weak cryptographic algorithm detected: $weak"
            fi
          done
          
          echo "‚úÖ Cryptographic analysis completed"
      
      - name: üìä Generate Security Report
        run: |
          echo "üìä Generating security analysis report..."
          
          cat > security-analysis.md << 'EOF'
# üîí Static Code Security Analysis Report

## üìã Summary
This report contains the results of static code security analysis.

## üîç Analysis Results

### Code Patterns
- **innerHTML Usage**: Verified for XSS vulnerabilities
- **eval() Usage**: Checked for code injection risks
- **document.write**: Analyzed for DOM manipulation issues
- **Hardcoded Secrets**: Scanned for exposed credentials
- **HTTP URLs**: Verified HTTPS usage

### Cryptographic Usage
- **Algorithms**: Checked for weak cryptographic algorithms
- **Implementation**: Verified secure implementation patterns

## ‚úÖ Recommendations
1. Always sanitize user input before using innerHTML
2. Avoid eval() and similar dynamic code execution
3. Use HTTPS for all external communications
4. Store secrets in environment variables or secure vaults
5. Use strong cryptographic algorithms (SHA-256+, AES-256)

EOF
          
          echo "‚úÖ Security report generated"
      
      - name: üì§ Upload Security Analysis
        uses: actions/upload-artifact@v4
        with:
          name: static-security-analysis
          path: |
            eslint-security.json
            security-analysis.md
          retention-days: 30

  # ===================================================================
  # STAGE 3: VALIDA√á√ÉO DE MANIFEST E PERMISS√ïES
  # ===================================================================
  
  manifest-security:
    name: üõ°Ô∏è Manifest & Permissions Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit --no-fund
      
      - name: üîí Manifest V3 Security Validation
        run: |
          echo "üîí Validating Manifest V3 security..."
          
          # Verificar vers√£o do manifest
          for manifest in manifest.json manifest-edge.json; do
            if [ -f "$manifest" ]; then
              echo "üìÑ Analyzing $manifest..."
              
              MANIFEST_VERSION=$(node -p "require('./$manifest').manifest_version")
              if [ "$MANIFEST_VERSION" != "3" ]; then
                echo "‚ùå $manifest: Invalid manifest version: $MANIFEST_VERSION (expected: 3)"
                exit 1
              fi
              
              echo "‚úÖ $manifest: Manifest V3 validated"
            fi
          done
          
          echo "‚úÖ Manifest V3 security validation completed"
      
      - name: üîê Permission Security Audit
        run: |
          echo "üîê Auditing extension permissions..."
          
          for manifest in manifest.json manifest-edge.json; do
            if [ -f "$manifest" ]; then
              echo "üìÑ Auditing permissions in $manifest..."
              
              # Extrair permiss√µes
              PERMISSIONS=$(node -p "JSON.stringify(require('./$manifest').permissions || [])")
              HOST_PERMISSIONS=$(node -p "JSON.stringify(require('./$manifest').host_permissions || [])")
              
              echo "üìã Declared permissions: $PERMISSIONS"
              echo "üåê Host permissions: $HOST_PERMISSIONS"
              
              # Verificar permiss√µes perigosas
              DANGEROUS_PERMS=("tabs" "history" "bookmarks" "cookies" "debugger" "management" "nativeMessaging")
              for perm in "${DANGEROUS_PERMS[@]}"; do
                if echo "$PERMISSIONS" | grep -q "\"$perm\""; then
                  echo "‚ö†Ô∏è Dangerous permission detected in $manifest: $perm"
                  echo "   Please ensure this permission is absolutely necessary"
                fi
              done
              
              # Verificar host permissions amplas
              if echo "$HOST_PERMISSIONS" | grep -q "<all_urls>"; then
                echo "‚ö†Ô∏è Broad host permission detected in $manifest: <all_urls>"
                echo "   Consider using specific host patterns instead"
              fi
              
              # Verificar permiss√µes desnecess√°rias
              OPTIONAL_PERMS=("geolocation" "notifications" "camera" "microphone")
              for perm in "${OPTIONAL_PERMS[@]}"; do
                if echo "$PERMISSIONS" | grep -q "\"$perm\""; then
                  echo "‚ÑπÔ∏è Optional permission detected in $manifest: $perm"
                  echo "   Ensure user consent is properly handled"
                fi
              done
            fi
          done
          
          echo "‚úÖ Permission security audit completed"
      
      - name: üîí Content Security Policy Validation
        run: |
          echo "üîí Validating Content Security Policy..."
          
          for manifest in manifest.json manifest-edge.json; do
            if [ -f "$manifest" ]; then
              echo "üìÑ Analyzing CSP in $manifest..."
              
              CSP=$(node -p "require('./$manifest').content_security_policy?.extension_pages || ''")
              
              if [ -z "$CSP" ]; then
                echo "‚ö†Ô∏è No CSP defined in $manifest"
                continue
              fi
              
              echo "üìã CSP: $CSP"
              
              # Verificar diretivas obrigat√≥rias
              if [[ ! "$CSP" =~ "script-src" ]]; then
                echo "‚ùå CSP missing script-src directive in $manifest"
                exit 1
              fi
              
              if [[ ! "$CSP" =~ "object-src 'none'" ]]; then
                echo "‚ùå CSP should include object-src 'none' in $manifest"
                exit 1
              fi
              
              # Verificar pr√°ticas inseguras
              if [[ "$CSP" =~ "unsafe-eval" ]]; then
                echo "‚ùå CSP contains unsafe-eval in $manifest"
                exit 1
              fi
              
              if [[ "$CSP" =~ "unsafe-inline" ]]; then
                echo "‚ùå CSP contains unsafe-inline in $manifest"
                exit 1
              fi
              
              # Verificar wildcards
              if [[ "$CSP" =~ "\*" ]]; then
                echo "‚ö†Ô∏è CSP contains wildcards in $manifest - review for security"
              fi
              
              echo "‚úÖ CSP validation passed for $manifest"
            fi
          done
          
          echo "‚úÖ Content Security Policy validation completed"
      
      - name: üåê Web Accessible Resources Security
        run: |
          echo "üåê Analyzing web accessible resources..."
          
          for manifest in manifest.json manifest-edge.json; do
            if [ -f "$manifest" ]; then
              echo "üìÑ Analyzing web accessible resources in $manifest..."
              
              WAR=$(node -p "JSON.stringify(require('./$manifest').web_accessible_resources || [])")
              
              if [ "$WAR" = "[]" ]; then
                echo "‚ÑπÔ∏è No web accessible resources in $manifest"
                continue
              fi
              
              echo "üìã Web accessible resources: $WAR"
              
              # Verificar formato Manifest V3
              WAR_COUNT=$(echo "$WAR" | jq 'length')
              if [ "$WAR_COUNT" -gt 0 ]; then
                echo "$WAR" | jq -r '.[] | @base64' | while read -r item; do
                  DECODED=$(echo "$item" | base64 -d)
                  
                  # Verificar se tem resources e matches
                  RESOURCES=$(echo "$DECODED" | jq -r '.resources // empty')
                  MATCHES=$(echo "$DECODED" | jq -r '.matches // empty')
                  
                  if [ -z "$RESOURCES" ] || [ -z "$MATCHES" ]; then
                    echo "‚ö†Ô∏è Web accessible resource missing resources or matches in $manifest"
                  fi
                done
              fi
              
              echo "‚úÖ Web accessible resources validated for $manifest"
            fi
          done
          
          echo "‚úÖ Web accessible resources security analysis completed"
      
      - name: üìä Generate Manifest Security Report
        run: |
          echo "üìä Generating manifest security report..."
          
          cat > manifest-security-report.md << 'EOF'
# üõ°Ô∏è Manifest Security Analysis Report

## üìã Summary
This report contains the security analysis of extension manifests.

## üîç Analysis Results

### Manifest V3 Compliance
- **Version**: Verified Manifest V3 usage
- **Structure**: Validated required fields and structure

### Permission Analysis
- **Declared Permissions**: Reviewed for necessity and security
- **Host Permissions**: Analyzed for scope and security implications
- **Dangerous Permissions**: Flagged high-risk permissions

### Content Security Policy
- **Directives**: Verified required security directives
- **Unsafe Practices**: Checked for unsafe-eval and unsafe-inline
- **Wildcards**: Reviewed wildcard usage

### Web Accessible Resources
- **Format**: Verified Manifest V3 format compliance
- **Security**: Analyzed exposure risks

## ‚úÖ Security Recommendations
1. Use minimal necessary permissions
2. Implement strict Content Security Policy
3. Avoid broad host permissions like <all_urls>
4. Regularly review and audit permissions
5. Document permission usage and necessity

EOF
          
          echo "‚úÖ Manifest security report generated"
      
      - name: üì§ Upload Manifest Security Report
        uses: actions/upload-artifact@v4
        with:
          name: manifest-security-report
          path: manifest-security-report.md
          retention-days: 30

  # ===================================================================
  # STAGE 4: COMPLIANCE E PRIVACIDADE
  # ===================================================================
  
  privacy-compliance:
    name: üîí Privacy & Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîç Data Collection Analysis
        run: |
          echo "üîç Analyzing data collection practices..."
          
          # Verificar coleta de dados
          DATA_COLLECTION_PATTERNS=("localStorage" "sessionStorage" "indexedDB" "cookies" "fetch" "XMLHttpRequest")
          
          echo "üìã Data Collection Analysis:"
          for pattern in "${DATA_COLLECTION_PATTERNS[@]}"; do
            MATCHES=$(grep -ri "$pattern" --include="*.js" . --exclude-dir=node_modules | wc -l)
            if [ "$MATCHES" -gt 0 ]; then
              echo "- $pattern usage: $MATCHES occurrences"
            fi
          done
          
          # Verificar APIs de dados sens√≠veis
          SENSITIVE_APIS=("geolocation" "camera" "microphone" "contacts" "calendar")
          echo "üìã Sensitive API Usage:"
          for api in "${SENSITIVE_APIS[@]}"; do
            MATCHES=$(grep -ri "$api" --include="*.js" . --exclude-dir=node_modules | wc -l)
            if [ "$MATCHES" -gt 0 ]; then
              echo "‚ö†Ô∏è Sensitive API detected: $api ($MATCHES occurrences)"
            fi
          done
          
          echo "‚úÖ Data collection analysis completed"
      
      - name: üåç GDPR/LGPD Compliance Check
        run: |
          echo "üåç Checking GDPR/LGPD compliance..."
          
          # Verificar documenta√ß√£o de privacidade
          PRIVACY_DOCS=("PRIVACY.md" "privacy.md" "PRIVACY_POLICY.md" "privacy-policy.md")
          PRIVACY_FOUND=false
          
          for doc in "${PRIVACY_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ Privacy documentation found: $doc"
              PRIVACY_FOUND=true
              break
            fi
          done
          
          if [ "$PRIVACY_FOUND" = false ]; then
            echo "‚ö†Ô∏è No privacy policy documentation found"
            echo "   Consider adding PRIVACY.md for GDPR/LGPD compliance"
          fi
          
          # Verificar consentimento do usu√°rio
          CONSENT_PATTERNS=("consent" "agree" "accept" "permission")
          echo "üìã User Consent Patterns:"
          for pattern in "${CONSENT_PATTERNS[@]}"; do
            MATCHES=$(grep -ri "$pattern" --include="*.js" --include="*.html" . --exclude-dir=node_modules | wc -l)
            if [ "$MATCHES" -gt 0 ]; then
              echo "- $pattern: $MATCHES occurrences"
            fi
          done
          
          echo "‚úÖ GDPR/LGPD compliance check completed"
      
      - name: üè™ Store Policy Compliance
        run: |
          echo "üè™ Checking store policy compliance..."
          
          # Chrome Web Store policies
          echo "üîµ Chrome Web Store Policy Check:"
          
          # Verificar campos obrigat√≥rios
          if [ -f "manifest-edge.json" ]; then
            NAME=$(node -p "require('./manifest-edge.json').name || 'missing'")
            DESCRIPTION=$(node -p "require('./manifest-edge.json').description || 'missing'")
            
            if [ ${#NAME} -gt 45 ]; then
              echo "‚ö†Ô∏è Chrome: Extension name too long (${#NAME} > 45 chars)"
            fi
            
            if [ ${#DESCRIPTION} -gt 132 ]; then
              echo "‚ö†Ô∏è Chrome: Description too long (${#DESCRIPTION} > 132 chars)"
            fi
          fi
          
          # Firefox Add-ons policies
          echo "ü¶ä Firefox Add-ons Policy Check:"
          
          if [ -f "manifest.json" ]; then
            # Verificar ID da extens√£o
            ADDON_ID=$(node -p "require('./manifest.json').browser_specific_settings?.gecko?.id || 'missing'")
            if [ "$ADDON_ID" = "missing" ]; then
              echo "‚ö†Ô∏è Firefox: Addon ID not specified"
            else
              echo "‚úÖ Firefox: Addon ID found"
            fi
          fi
          
          echo "‚úÖ Store policy compliance check completed"
      
      - name: üìä Generate Privacy Compliance Report
        run: |
          echo "üìä Generating privacy compliance report..."
          
          cat > privacy-compliance-report.md << 'EOF'
# üîí Privacy & Compliance Analysis Report

## üìã Summary
This report analyzes privacy practices and regulatory compliance.

## üîç Analysis Results

### Data Collection
- **Storage APIs**: localStorage, sessionStorage, indexedDB usage
- **Network Requests**: fetch, XMLHttpRequest patterns
- **Sensitive APIs**: Geolocation, camera, microphone access

### GDPR/LGPD Compliance
- **Privacy Documentation**: Privacy policy availability
- **User Consent**: Consent mechanisms implementation
- **Data Rights**: User data control features

### Store Policy Compliance
- **Chrome Web Store**: Name length, description, permissions
- **Firefox Add-ons**: Addon ID, manifest structure
- **Content Policies**: Compliance with store content guidelines

## ‚úÖ Compliance Recommendations
1. Implement clear privacy policy
2. Obtain explicit user consent for data collection
3. Provide data export/deletion capabilities
4. Follow store-specific guidelines
5. Regular compliance audits

## üìã Required Actions
- [ ] Add privacy policy documentation
- [ ] Implement user consent mechanisms
- [ ] Review data collection practices
- [ ] Ensure store policy compliance
- [ ] Document data processing activities

EOF
          
          echo "‚úÖ Privacy compliance report generated"
      
      - name: üì§ Upload Privacy Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: privacy-compliance-report
          path: privacy-compliance-report.md
          retention-days: 30

  # ===================================================================
  # STAGE 5: RELAT√ìRIO CONSOLIDADO DE SEGURAN√áA
  # ===================================================================
  
  security-report:
    name: üìä Consolidated Security Report
    runs-on: ubuntu-latest
    needs: [dependency-security, static-code-analysis, manifest-security, privacy-compliance]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: üì• Download All Security Reports
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports/
      
      - name: üìä Generate Consolidated Report
        run: |
          echo "üìä Generating consolidated security report..."
          
          cat > consolidated-security-report.md << 'EOF'
# üîí Consolidated Security Analysis Report

## üìã Executive Summary
This report consolidates all security analysis results for the Assistente de Regula√ß√£o M√©dica browser extension.

## üéØ Security Assessment Results

### Overall Security Score
- **Dependency Security**: ${{ needs.dependency-security.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}
- **Static Code Analysis**: ${{ needs.static-code-analysis.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}
- **Manifest Security**: ${{ needs.manifest-security.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}
- **Privacy Compliance**: ${{ needs.privacy-compliance.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}

### Risk Assessment
EOF
          
          # Determinar n√≠vel de risco geral
          FAILED_CHECKS=0
          
          if [ "${{ needs.dependency-security.result }}" != "success" ]; then
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
          fi
          
          if [ "${{ needs.static-code-analysis.result }}" != "success" ]; then
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
          fi
          
          if [ "${{ needs.manifest-security.result }}" != "success" ]; then
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
          fi
          
          if [ "${{ needs.privacy-compliance.result }}" != "success" ]; then
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
          fi
          
          if [ "$FAILED_CHECKS" -eq 0 ]; then
            RISK_LEVEL="üü¢ LOW"
            RISK_DESCRIPTION="All security checks passed. The extension meets security standards."
          elif [ "$FAILED_CHECKS" -eq 1 ]; then
            RISK_LEVEL="üü° MEDIUM"
            RISK_DESCRIPTION="One security check failed. Review and address the issues."
          else
            RISK_LEVEL="üî¥ HIGH"
            RISK_DESCRIPTION="Multiple security checks failed. Immediate attention required."
          fi
          
          cat >> consolidated-security-report.md << EOF

**Risk Level**: $RISK_LEVEL
**Assessment**: $RISK_DESCRIPTION

### üìã Detailed Findings

#### Dependency Security
- **Status**: ${{ needs.dependency-security.result == 'success' && 'PASSED' || 'FAILED' }}
- **Critical Issues**: Check npm audit results
- **Recommendations**: Update vulnerable dependencies

#### Static Code Analysis
- **Status**: ${{ needs.static-code-analysis.result == 'success' && 'PASSED' || 'FAILED' }}
- **Code Patterns**: Review security-sensitive patterns
- **Recommendations**: Follow secure coding practices

#### Manifest Security
- **Status**: ${{ needs.manifest-security.result == 'success' && 'PASSED' || 'FAILED' }}
- **Permissions**: Review extension permissions
- **Recommendations**: Use minimal necessary permissions

#### Privacy Compliance
- **Status**: ${{ needs.privacy-compliance.result == 'success' && 'PASSED' || 'FAILED' }}
- **Data Handling**: Review data collection practices
- **Recommendations**: Ensure GDPR/LGPD compliance

### üîß Action Items

#### Immediate Actions Required
EOF
          
          if [ "$FAILED_CHECKS" -gt 0 ]; then
            cat >> consolidated-security-report.md << 'EOF'
1. üîç Review failed security checks
2. üõ†Ô∏è Address identified vulnerabilities
3. üìã Update security documentation
4. üîÑ Re-run security scans
EOF
          else
            cat >> consolidated-security-report.md << 'EOF'
1. ‚úÖ All security checks passed
2. üìä Monitor for new vulnerabilities
3. üîÑ Schedule regular security reviews
4. üìã Maintain security documentation
EOF
          fi
          
          cat >> consolidated-security-report.md << 'EOF'

#### Long-term Security Improvements
1. üîí Implement automated security monitoring
2. üìö Regular security training for developers
3. üîÑ Establish security review process
4. üìä Set up security metrics tracking

### üìû Support and Resources
- üîí [OWASP Extension Security](https://owasp.org/www-project-web-security-testing-guide/)
- üìã [Chrome Extension Security](https://developer.chrome.com/docs/extensions/mv3/security/)
- ü¶ä [Firefox Extension Security](https://extensionworkshop.com/documentation/develop/build-a-secure-extension/)
- üåç [GDPR Compliance Guide](https://gdpr.eu/)

---
**Report Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**Scan Level**: ${{ env.SECURITY_SCAN_LEVEL }}
**Pipeline**: ${{ github.workflow }} #${{ github.run_number }}
EOF
          
          echo "‚úÖ Consolidated security report generated"
      
      - name: üìä Security Summary for GitHub
        run: |
          echo "### üîí Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Risk Level |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-security.result == 'success' && '‚úÖ Secure' || '‚ùå Issues Found' }} | ${{ needs.dependency-security.result == 'success' && 'Low' || 'High' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.static-code-analysis.result == 'success' && '‚úÖ Secure' || '‚ùå Issues Found' }} | ${{ needs.static-code-analysis.result == 'success' && 'Low' || 'High' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Manifest | ${{ needs.manifest-security.result == 'success' && '‚úÖ Secure' || '‚ùå Issues Found' }} | ${{ needs.manifest-security.result == 'success' && 'Low' || 'High' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Privacy | ${{ needs.privacy-compliance.result == 'success' && '‚úÖ Compliant' || '‚ùå Issues Found' }} | ${{ needs.privacy-compliance.result == 'success' && 'Low' || 'High' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determinar status geral
          FAILED_CHECKS=0
          if [ "${{ needs.dependency-security.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.static-code-analysis.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.manifest-security.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.privacy-compliance.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          
          if [ "$FAILED_CHECKS" -eq 0 ]; then
            echo "## üéâ Overall Security Status: ‚úÖ SECURE" >> $GITHUB_STEP_SUMMARY
            echo "All security checks passed. The extension meets security standards." >> $GITHUB_STEP_SUMMARY
          elif [ "$FAILED_CHECKS" -eq 1 ]; then
            echo "## ‚ö†Ô∏è Overall Security Status: üü° REVIEW NEEDED" >> $GITHUB_STEP_SUMMARY
            echo "One security check failed. Please review and address the issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "## üö® Overall Security Status: üî¥ ACTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "Multiple security checks failed. Immediate attention required before deployment." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üì§ Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: consolidated-security-report.md
          retention-days: 90
      
      - name: üéØ Set Security Exit Code
        run: |
          FAILED_CHECKS=0
          if [ "${{ needs.dependency-security.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.static-code-analysis.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.manifest-security.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          if [ "${{ needs.privacy-compliance.result }}" != "success" ]; then FAILED_CHECKS=$((FAILED_CHECKS + 1)); fi
          
          if [ "$FAILED_CHECKS" -eq 0 ]; then
            echo "‚úÖ Security pipeline completed successfully"
            exit 0
          else
            echo "‚ùå Security pipeline found $FAILED_CHECKS issue(s)"
            exit 1
          fi
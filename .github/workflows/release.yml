# Release Workflow - Assistente de Regula√ß√£o M√©dica
# 
# Workflow autom√°tico para releases quando uma tag √© criada
# Executa build completo, cria GitHub release e opcionalmente faz upload para stores

name: üöÄ Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      skip_stores:
        description: 'Skip store uploads'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

# Configura√ß√µes globais
env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: 'v1'

# Permiss√µes necess√°rias
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # === JOB 1: PREPARA√á√ÉO ===
  prepare:
    name: üîß Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      should-upload-stores: ${{ steps.config.outputs.should-upload-stores }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üî¢ Extract Version
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
            $tag = "v$version"
            $isPrerelease = "${{ github.event.inputs.prerelease }}"
          } else {
            $tag = "${{ github.ref_name }}"
            $version = $tag.Substring(1)
            $isPrerelease = "false"
            if ($version -match "-[a-zA-Z]") {
              $isPrerelease = "true"
            }
          }
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "is-prerelease=$isPrerelease" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "üì¶ Version: $version"
          Write-Host "üè∑Ô∏è Tag: $tag"
          Write-Host "üîÑ Prerelease: $isPrerelease"

      - name: ‚öôÔ∏è Configure Release
        id: config
        shell: pwsh
        run: |
          $shouldUploadStores = "true"
          if ("${{ github.event.inputs.skip_stores }}" -eq "true") {
            $shouldUploadStores = "false"
          }
          if ("${{ steps.version.outputs.is-prerelease }}" -eq "true") {
            $shouldUploadStores = "false"
          }
          "should-upload-stores=$shouldUploadStores" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "üè™ Upload to stores: $shouldUploadStores"

  # === JOB 2: VALIDA√á√ÉO PR√â-RELEASE ===
  validate:
    name: üîç Pre-Release Validation
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed"
      
      - name: üîß Run ESLint
        run: |
          npm run lint
          echo "‚úÖ ESLint passed"
      
      - name: üìÑ Validate Manifests
        run: |
          npm run validate:manifests
          echo "‚úÖ Manifests validated"
      
      - name: üîç Full Validation
        run: |
          if npm run validate --silent 2>/dev/null; then
            echo "‚úÖ Full validation completed"
          else
            echo "‚ö†Ô∏è Full validation script not available, skipping"
          fi
      
      - name: üîí Security Check
        run: |
          npm audit --audit-level=moderate
          echo "‚úÖ Security check passed"

  # === JOB 3: BUILD RELEASE ===
  build:
    name: üèóÔ∏è Build Release
    runs-on: ubuntu-latest
    needs: [prepare, validate]
    timeout-minutes: 15
    
    outputs:
      chrome-zip: ${{ steps.artifacts.outputs.chrome-zip }}
      firefox-zip: ${{ steps.artifacts.outputs.firefox-zip }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed"
      
      - name: üé® Build CSS
        run: |
          npm run build:css
          echo "‚úÖ CSS compiled"
      
      - name: üèóÔ∏è Build Extensions
        run: |
          npm run build
          echo "‚úÖ Extensions built for all targets"
      
      - name: üì¶ Create Distribution ZIPs
        run: |
          npm run build:zips
          echo "‚úÖ Distribution ZIPs created"
      
      - name: üìä Collect Artifacts Info
        id: artifacts
        shell: pwsh
        run: |
          $chromeZip = (Get-ChildItem -Path dist-zips -Recurse -Filter "*chrome*.zip" | Select-Object -First 1)
          $firefoxZip = (Get-ChildItem -Path dist-zips -Recurse -Filter "*firefox*.zip" | Select-Object -First 1)
          "chrome-zip=$($chromeZip.Name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "firefox-zip=$($firefoxZip.Name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "üì¶ Chrome ZIP: $($chromeZip.Name)"
          Write-Host "üì¶ Firefox ZIP: $($firefoxZip.Name)"
          "### üì¶ Build Artifacts" | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          "| Target | File | Size |" | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          "|--------|------|------|" | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          Get-ChildItem -Path dist-zips -Recurse -Filter "*.zip" | ForEach-Object {
            $size = "{0:N2} KB" -f ($_.Length / 1KB)
            $basename = $_.Name
            $target = if ($basename -match "chrome") { "chrome" } elseif ($basename -match "firefox") { "firefox" } else { "unknown" }
            "| $target | $basename | $size |" | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          }
      
      - name: üì§ Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds-${{ needs.prepare.outputs.version }}
          path: |
            dist-zips/*.zip
            .dist/
          retention-days: 30
          if-no-files-found: error

  # === JOB 4: CRIAR GITHUB RELEASE ===
  github-release:
    name: üöÄ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, validate, build]
    timeout-minutes: 10
    
    outputs:
      release-url: ${{ steps.release.outputs.html_url }}
      release-id: ${{ steps.release.outputs.id }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì• Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds-${{ needs.prepare.outputs.version }}
          path: ./release-artifacts/

      - name: üìù Generate Changelog
        id: changelog
        shell: pwsh
        run: |
          $lastTag = git describe --tags --abbrev=0 HEAD^ 2>$null
          if ($LASTEXITCODE -ne 0) { $lastTag = "" }

          if ($lastTag) {
              Write-Host "üìã Generating changelog since $lastTag"
              $changelogLines = git log --pretty=format:"- %s" "$lastTag..HEAD" | Where-Object { $_ -match "^- (feat|fix|docs|style|refactor|perf|test|chore|security)" } | Select-Object -First 20
          } else {
              Write-Host "üìã First release - generating basic changelog"
              $changelogLines = @("- Primeira release do Assistente de Regula√ß√£o M√©dica")
          }

          if (-not $changelogLines) {
              $changelogLines = @("- Atualiza√ß√µes diversas e melhorias")
          }

          $features = ($changelogLines | Where-Object { $_ -match "feat:" } | ForEach-Object { $_ -replace '^- feat: ', '- ' }) -join "`n"
          $fixes = ($changelogLines | Where-Object { $_ -match "fix:" } | ForEach-Object { $_ -replace '^- fix: ', '- ' }) -join "`n"
          $others = ($changelogLines | Where-Object { $_ -notmatch "(feat:|fix:)" }) -join "`n"

          $formattedChangelog = "## üéâ Release ${{ needs.prepare.outputs.version }}"
          if ($features) {
              $formattedChangelog += "`n`n### ‚ú® Novas Funcionalidades`n$features"
          }
          if ($fixes) {
              $formattedChangelog += "`n`n### üêõ Corre√ß√µes`n$fixes"
          }
          if ($others) {
              $formattedChangelog += "`n`n### üîß Outras Altera√ß√µes`n$others"
          }

          $formattedChangelog += @"
`n`n### üì¶ Downloads
- **Chrome/Edge**: AssistenteDeRegulacao-chrome-v${{ needs.prepare.outputs.version }}.zip
- **Firefox**: AssistenteDeRegulacao-firefox-v${{ needs.prepare.outputs.version }}.zip

### üîß Instala√ß√£o
1. Baixe o arquivo ZIP correspondente ao seu navegador
2. Extraia o arquivo em uma pasta local
3. Abra as extens√µes do navegador
4. Ative o modo desenvolvedor
5. Clique em 'Carregar extens√£o sem compacta√ß√£o'
6. Selecione a pasta extra√≠da
"@
          Set-Content -Path "changelog.md" -Value $formattedChangelog -Encoding utf8
          "changelog-file=changelog.md" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: üì§ Rename Assets
        shell: pwsh
        run: |
          $chromeZip = (Get-ChildItem -Path ./release-artifacts/dist-zips -Recurse -Filter "*chrome*.zip" | Select-Object -First 1)
          $firefoxZip = (Get-ChildItem -Path ./release-artifacts/dist-zips -Recurse -Filter "*firefox*.zip" | Select-Object -First 1)
          if ($null -ne $chromeZip) {
            $newName = "AssistenteDeRegulacao-chrome-v${{ needs.prepare.outputs.version }}.zip"
            echo "‚úÖ Renaming Chrome ZIP to $newName"
            Rename-Item -Path $chromeZip.FullName -NewName $newName
          } else {
            echo "‚ö†Ô∏è Chrome ZIP not found"
          }
          if ($null -ne $firefoxZip) {
            $newName = "AssistenteDeRegulacao-firefox-v${{ needs.prepare.outputs.version }}.zip"
            echo "‚úÖ Renaming Firefox ZIP to $newName"
            Rename-Item -Path $firefoxZip.FullName -NewName $newName
          } else {
            echo "‚ö†Ô∏è Firefox ZIP not found"
          }
      
      - name: üöÄ Create Release
        id: release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Release ${{ needs.prepare.outputs.version }}"
          body_path: changelog.md
          draft: false
          prerelease: ${{ needs.prepare.outputs.is-prerelease }}
          files: |
            ./release-artifacts/dist-zips/*.zip
          fail_on_unmatched_files: true

      - name: üìã Release Summary
        run: |
          echo "### üöÄ GitHub Release Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.prepare.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY

  # === JOB 5: UPLOAD PARA STORES (OPCIONAL) ===
  store-upload:
    name: üè™ Upload to Stores
    runs-on: ubuntu-latest
    needs: [prepare, github-release]
    if: needs.prepare.outputs.should-upload-stores == 'true'
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        store: [chrome, firefox]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üì• Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds-${{ needs.prepare.outputs.version }}
          path: ./release-artifacts/
      
      - name: üìÅ Prepare Artifacts
        run: |
          mkdir -p dist-zips
          cp ./release-artifacts/dist-zips/*.zip dist-zips/
          ls -la dist-zips/
      
      - name: üîµ Upload to Chrome Web Store
        if: matrix.store == 'chrome'
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        shell: pwsh
        run: |
          if ($env:CHROME_EXTENSION_ID) {
            Write-Host "üîµ Uploading to Chrome Web Store..."
            npm run upload:chrome
            Write-Host "‚úÖ Chrome Web Store upload completed"
          } else {
            Write-Host "‚ö†Ô∏è Chrome Web Store credentials not configured"
          }
      
      - name: ü¶ä Upload to Firefox Add-ons
        if: matrix.store == 'firefox'
        env:
          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}
          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}
        shell: pwsh
        run: |
          if ($env:FIREFOX_JWT_ISSUER) {
            Write-Host "ü¶ä Uploading to Firefox Add-ons..."
            npm run upload:firefox
            Write-Host "‚úÖ Firefox Add-ons upload completed"
          } else {
            Write-Host "‚ö†Ô∏è Firefox Add-ons credentials not configured"
          }

  # === JOB 6: NOTIFICA√á√ïES E CLEANUP ===
  notify:
    name: üì¢ Notifications & Cleanup
    runs-on: ubuntu-latest
    needs: [prepare, github-release, store-upload]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: üìä Generate Final Report
        shell: pwsh
        run: |
          $summary = @"
          # üöÄ Release Report

          ## üìã Release Information
          - **Version**: ${{ needs.prepare.outputs.version }}
          - **Tag**: ${{ needs.prepare.outputs.tag }}
          - **Prerelease**: ${{ needs.prepare.outputs.is-prerelease }}
          - **Release URL**: ${{ needs.github-release.outputs.release-url }}

          ## üéØ Job Results
          - **Validation**: $(if ('${{ needs.validate.result }}' -eq 'success') { '‚úÖ' } else { '‚ùå' })
          - **Build**: $(if ('${{ needs.build.result }}' -eq 'success') { '‚úÖ' } else { '‚ùå' })
          - **GitHub Release**: $(if ('${{ needs.github-release.result }}' -eq 'success') { '‚úÖ' } else { '‚ùå' })
          - **Store Upload**: $(if ('${{ needs.store-upload.result }}' -eq 'success') { '‚úÖ' } elseif ('${{ needs.store-upload.result }}' -eq 'skipped') { '‚è≠Ô∏è' } else { '‚ùå' })
          "@
          if ("${{ needs.github-release.result }}" -eq "success") {
            $summary += @"

            ## üéâ Release Status: ‚úÖ SUCCESS
            Release ${{ needs.prepare.outputs.version }} has been successfully created!

            ### üìã Next Steps
            1. üîó Check the release: ${{ needs.github-release.outputs.release-url }}
            2. üì¶ Test the downloaded ZIPs
            3. üè™ Monitor store approval status
            4. üì¢ Announce the release to users
"@
          } else {
            $summary += @"

            ## ‚ùå Release Status: FAILED
            Release process encountered errors. Please check the logs.
"@
          }
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
      
      - name: üéØ Set Final Status
        shell: pwsh
        run: |
          if ("${{ needs.github-release.result }}" -eq "success") {
            Write-Host "‚úÖ Release workflow completed successfully"
            exit 0
          } else {
            Write-Host "‚ùå Release workflow failed"
            exit 1
          }

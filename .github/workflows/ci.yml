# Continuous Integration Pipeline for Browser Extension
name: "CI - Browser Extension"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_call:
    outputs:
      build-status:
        description: "Build status"
        value: ${{ jobs.final-validation.outputs.status }}

env:
  NODE_VERSION: '18'
  CACHE_KEY: 'node-modules'

jobs:
  # ===============================
  # STAGE 1: VALIDATION & QUALITY
  # ===============================
  
  validate:
    name: 🔍 Validation & Security
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Cache Dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY }}-
            
      - name: 📥 Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        
      - name: 🛡️ Security Audit
        run: npm audit --audit-level=moderate
        
      - name: 🔒 Snyk Security Scan
        if: github.event_name == 'push'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ ! -z "$SNYK_TOKEN" ]; then
            npx snyk test --severity-threshold=high
          else
            echo "⚠️ Snyk token not found, skipping security scan"
          fi
        continue-on-error: true
        
      - name: ✅ Validate Manifests
        run: npm run validate:manifest
        
      - name: 🔐 Validate Permissions
        run: npm run validate:permissions
        
      - name: 🛡️ Validate CSP
        run: npm run validate:csp
        
      - name: 📊 Performance Validation
        run: npm run validate:performance

  lint:
    name: 🎨 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Restore Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install Dependencies
        if: needs.validate.outputs.cache-hit != 'true'
        run: npm ci
        
      - name: 🔍 ESLint JavaScript
        run: npm run lint:js
        
      - name: 🎨 StyleLint CSS
        run: npm run lint:css
        
      - name: 📄 HTMLHint HTML
        run: npm run lint:html

  # ===============================
  # STAGE 2: TESTING
  # ===============================
  
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: [validate, lint]
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Restore Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install Dependencies
        if: needs.validate.outputs.cache-hit != 'true'
        run: npm ci
        
      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: npm run test:${{ matrix.test-type }}
        
      - name: 📊 Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  cross-browser-test:
    name: 🌐 Cross-Browser Testing
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Restore Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🌐 Install Browser (${{ matrix.browser }})
        if: matrix.browser == 'chrome'
        run: npx playwright install chromium
        
      - name: 🦊 Install Browser (${{ matrix.browser }})
        if: matrix.browser == 'firefox'
        run: npx playwright install firefox
        
      - name: 🌐 Install Browser (${{ matrix.browser }})
        if: matrix.browser == 'edge'
        run: npx playwright install chromium
        
      - name: 🧪 Run Cross-Browser Tests
        run: BROWSER=${{ matrix.browser }} npm run test:cross-browser

  # ===============================
  # STAGE 3: BUILD & OPTIMIZATION
  # ===============================
  
  build:
    name: 🏗️ Build Extension
    runs-on: ubuntu-latest
    needs: [test, cross-browser-test]
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Restore Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🎨 Build CSS
        run: npm run build:css
        
      - name: 🏗️ Build ${{ matrix.browser }} Extension
        run: npm run build:${{ matrix.browser }}
        
      - name: 📦 Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: dist/${{ matrix.browser }}
          key: build-${{ matrix.browser }}-${{ github.sha }}
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-${{ matrix.browser }}-${{ github.sha }}
          path: dist/${{ matrix.browser }}
          retention-days: 30

  # ===============================
  # STAGE 4: PACKAGING & VALIDATION
  # ===============================
  
  package:
    name: 📦 Package Extensions
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Restore Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 📦 Restore Build Artifacts
        uses: actions/cache@v3
        with:
          path: dist/${{ matrix.browser }}
          key: build-${{ matrix.browser }}-${{ github.sha }}
          
      - name: 📦 Package ${{ matrix.browser }} Extension
        run: npm run package:${{ matrix.browser }}
        
      - name: ✅ Validate Package
        run: |
          if [ "${{ matrix.browser }}" = "firefox" ]; then
            npx web-ext lint --source-dir=dist/${{ matrix.browser }}
          fi
          
      - name: 📤 Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ matrix.browser }}-${{ github.sha }}
          path: dist/packages/
          retention-days: 90

  # ===============================
  # STAGE 5: FINAL VALIDATION
  # ===============================
  
  final-validation:
    name: ✅ Final Validation
    runs-on: ubuntu-latest
    needs: package
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📦 Download All Packages
        uses: actions/download-artifact@v4
        with:
          path: packages/
          
      - name: 🔍 Validate All Packages
        run: |
          echo "📦 Validating all generated packages..."
          ls -la packages/
          
          # Validate package sizes
          for pkg in packages/package-*/; do
            size=$(du -sb "$pkg" | cut -f1)
            echo "Package $pkg size: $size bytes"
            
            # Check Chrome Web Store size limit (128MB)
            if [ $size -gt 134217728 ]; then
              echo "❌ Package $pkg exceeds size limit"
              exit 1
            fi
          done
          
          echo "✅ All packages validated successfully"
          
      - name: 📊 Generate Build Report
        run: |
          echo "# 📊 Build Report" > build-report.md
          echo "- **Commit:** ${{ github.sha }}" >> build-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> build-report.md
          echo "- **Timestamp:** $(date -u)" >> build-report.md
          echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> build-report.md
          echo "" >> build-report.md
          echo "## 📦 Generated Packages" >> build-report.md
          ls -la packages/ >> build-report.md
          
      - name: 📤 Upload Build Report
        uses: actions/upload-artifact@v3
        with:
          name: build-report-${{ github.sha }}
          path: build-report.md

  # ===============================
  # NOTIFICATION
  # ===============================
  
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [validate, lint, test, cross-browser-test, build, package, final-validation]
    if: always()
    
    steps:
      - name: 📢 Notify Success
        if: needs.final-validation.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "🎉 All validations, tests, builds and packages are ready"
          
      - name: 📢 Notify Failure
        if: failure()
        run: |
          echo "❌ CI Pipeline failed!"
          echo "🔍 Check the logs for details"
          exit 1
